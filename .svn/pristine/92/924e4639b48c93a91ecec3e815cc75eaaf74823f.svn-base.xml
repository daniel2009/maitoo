<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"><mapper namespace="com.weiye.dao.OrderDao">	<resultMap id="basic_result_map" type="com.weiye.model.Order">		<id column="id" property="id" javaType="String" />		<result column="order_id" property="orderId" javaType="String"/>		<result column="warehouse_id" property="warehouseId" javaType="String"/>		<result column="user_id" property="userId" javaType="String" />		<result column="type" property="type" javaType="String"/>		<result column="emp_id" property="empId" javaType="String" />		<result column="store_id" property="storeId" javaType="String" />		<result column="weight" property="weight" javaType="String" />		<result column="jwweight" property="jwweight" javaType="String" />				<result column="tariff" property="tariff" javaType="String" />		<result column="or" property="or" javaType="String" />		<result column="other" property="other" javaType="String" />		<result column="premium" property="premium" javaType="String" />		<result column="parce_value" property="parceValue" javaType="String" />		<result column="consignee_id" property="consigneeId" javaType="String" />		<result column="consignee_name" property="cName" javaType="String" />		<result column="consignee_province" property="cProvince"			javaType="String" />		<result column="consignee_city" property="cCity" javaType="String" />		<result column="consignee_district" property="cDistrict"			javaType="String" />		<result column="consignee_street_address" property="cStreetAddress"			javaType="String" />		<result column="consignee_zip_code" property="cZipCode"			javaType="String" />		<result column="consignee_phone" property="cPhone" javaType="String" />		<result column="cardurl" property="cardUrl" javaType="String" />		<result column="cardid" property="cardId" javaType="String" />		<result column="sea_no" property="seaNo" javaType="String" />						<result column="remark" property="remark" javaType="String" />		<result column="state" property="state" javaType="String" />		<result column="create_date" property="createDate" javaType="String" />		<result column="modify_date" property="modifyDate" javaType="String" />		<result column="mail" property="mail" javaType="String" />		<result column="third_pns" property="thirdPNS" javaType="String" />		<result column="third_no" property="thirdNo" javaType="String" />		<result column="batch_id" property="batchId" javaType="String" />		<result column="flight" property="flight" javaType="String" />		<result column="total_money" property="totalMoney" javaType="String"/>		<result column="length" property="length" javaType="String" />		<result column="width" property="width" javaType="String" />		<result column="height" property="height" javaType="String" />		<result column="channel_id" property="channelId" javaType="String" />				<!-- by kai -->		<result column="cardid" property="cardid" javaType="String" />		<result column="cardurl" property="cardurl" javaType="String" />		<result column="weight_kg" property="weightKg" javaType="String" />		<result column="address_all" property="addressAll" javaType="String" />		<result column="name_pinyi" property="NamePinyi" javaType="String" />		<result column="express_name" property="expressName" javaType="String" />		<result column="state_remark" property="stateRemark" javaType="String" />		<result column="CommodityCost" property="CommodityCost" javaType="String" />		<result column="senduser_zipcode" property="senduserZipcode" javaType="String" />		<result column="senduser_city" property="senduserCity" javaType="String" />		<result column="senduser_state" property="senduserState" javaType="String" />				<result column="third_create_date" property="thirdCreateDate" javaType="String" />		<result column="box_no" property="boxNo" javaType="String" />		<result column="pay_or_not" property="payOrNot" javaType="String" />		<result column="card_or_not" property="cardOrNot" javaType="String" />		<result column="commodity_third_list" property="commodityThirdList" javaType="String" />		<result column="import_remark" property="importRemark" javaType="String" />				<result column="base_money" property="baseMoney" javaType="String" />		<result column="third_brands" property="thirdBrands" javaType="String" />		<result column="type_key" property="typeKey" javaType="String" />				<result column="senduserphone" property="senduserphone"			javaType="String" />		<result column="senduserAddress" property="senduserAddress"			javaType="String" />					<result column="senduserName" property="senduserName"			javaType="String" />		<result column="cardurlother" property="cardurlother"			javaType="String" />				<result column="cardurltogether" property="cardurltogether"			javaType="String" />					<result column="tran_pro" property="tranPro" javaType="String" />		<result column="pay_to_china" property="payToChina" javaType="String"/>		<result column="pay_change_warehouse" property="payChangeWarehouse" javaType="String"/>		<association property="storagePosition" javaType="com.weiye.model.StoragePosition">			<id property="id" column="storage_position_id"/>			<result property="storageName" column="storage_position_storage_name"/>			<result property="colNumber" column="storage_position_col_number"/>			<result property="rowNumber" column="storage_position_row_number"/>		</association>		<association property="user" column="user_id"			select="com.weiye.dao.UserDao.getUserById"></association>		<collection property="details" column="order_id"			select="com.weiye.dao.OrderDetailDao.getAllByOrderId"></collection>	</resultMap>	<resultMap id="export_order_result_map" type="com.weiye.model.temp.ExportOrder">		<id column="id" property="id" javaType="String" />		<result column="order_id" property="orderId" javaType="String"/>		<result column="type" property="type" javaType="String"/>		<result column="warehouse_id" property="warehouseId" javaType="String"/>		<result column="user_id" property="userId" javaType="String" />		<result column="emp_id" property="empId" javaType="String" />		<result column="store_id" property="storeId" javaType="String" />		<result column="weight" property="weight" javaType="String" />		<result column="tariff" property="tariff" javaType="String" />		<result column="jwweight" property="jwweight" javaType="String" />		<result column="or" property="or" javaType="String" />		<result column="other" property="other" javaType="String" />		<result column="premium" property="premium" javaType="String" />		<result column="parce_value" property="parceValue" javaType="String" />		<result column="consignee_id" property="consigneeId" javaType="String" />		<result column="consignee_name" property="cName" javaType="String" />		<result column="consignee_province" property="cProvince"			javaType="String" />		<result column="consignee_city" property="cCity" javaType="String" />		<result column="consignee_district" property="cDistrict"			javaType="String" />		<result column="consignee_street_address" property="cStreetAddress"			javaType="String" />		<result column="consignee_zip_code" property="cZipCode"			javaType="String" />		<result column="consignee_phone" property="cPhone" javaType="String" />		<result column="remark" property="remark" javaType="String" />		<result column="state" property="state" javaType="String" />		<result column="create_date" property="createDate" javaType="String" />		<result column="modify_date" property="modifyDate" javaType="String" />		<result column="mail" property="mail" javaType="String" />		<result column="third_pns" property="thirdPNS" javaType="String" />		<result column="third_no" property="thirdNo" javaType="String" />		<result column="batch_id" property="batchId" javaType="String" />		<result column="flight" property="flight" javaType="String" />		<result column="total_money" property="totalMoney" javaType="String"/>		<result column="sea_no" property="seaNo" javaType="String" />		<!-- by kai -->		<result column="cardid" property="cardid" javaType="String" />		<result column="cardurl" property="cardurl" javaType="String" />		<result column="weight_kg" property="weightKg" javaType="String" />		<result column="address_all" property="addressAll" javaType="String" />		<result column="name_pinyi" property="NamePinyi" javaType="String" />		<result column="express_name" property="expressName" javaType="String" />				<result column="senduser_zipcode" property="senduserZipcode" javaType="String" />		<result column="senduser_city" property="senduserCity" javaType="String" />		<result column="senduser_state" property="senduserState" javaType="String" />				<result column="third_create_date" property="thirdCreateDate" javaType="String" />		<result column="box_no" property="boxNo" javaType="String" />		<result column="pay_or_not" property="payOrNot" javaType="String" />		<result column="card_or_not" property="cardOrNot" javaType="String" />		<result column="commodity_third_list" property="commodityThirdList" javaType="String" />		<result column="import_remark" property="importRemark" javaType="String" />		<result column="state_remark" property="stateRemark" javaType="String" />				<result column="base_money" property="baseMoney" javaType="String" />		<result column="third_brands" property="thirdBrands" javaType="String" />		<result column="CommodityCost" property="CommodityCost" javaType="String" />		<result column="senduserphone" property="senduserphone"			javaType="String" />		<result column="senduserAddress" property="senduserAddress"			javaType="String" />		<result column="senduserName" property="senduserName"			javaType="String" />					<result column="cardurlother" property="cardurlother"			javaType="String" />				<result column="cardurltogether" property="cardurltogether"			javaType="String" />			<result column="tran_pro" property="tranPro"			javaType="String" />						<result column="type_key" property="typeKey" javaType="String" />					<result column="pay_to_china" property="payToChina" javaType="String"/>		<result column="pay_change_warehouse" property="payChangeWarehouse" javaType="String"/>		<association property="storagePosition" javaType="com.weiye.model.StoragePosition">			<id property="id" column="storage_position_id"/>			<result property="storageName" column="storage_position_storage_name"/>			<result property="colNumber" column="storage_position_col_number"/>			<result property="rowNumber" column="storage_position_row_number"/>		</association>		<association property="user" column="user_id"			select="com.weiye.dao.UserDao.getUserById"></association>		<association property="channel" column="channel_id"			select="com.weiye.dao.ChannelDao.getChannelById"></association>					<collection property="details" column="order_id"			select="com.weiye.dao.OrderDetailDao.getAllByOrderId"></collection>	</resultMap>				<resultMap id="basic_result_onlyorder_map" type="com.weiye.model.Order">			<id column="id" property="id" javaType="String" />		<result column="order_id" property="orderId" javaType="String"/>				<result column="warehouse_id" property="warehouseId" javaType="String"/>		<result column="user_id" property="userId" javaType="String" />										<result column="consignee_name" property="cName" javaType="String" />				<result column="consignee_phone" property="cPhone" javaType="String" />		<result column="cardurl" property="cardUrl" javaType="String" />										<result column="state" property="state" javaType="String" />		<result column="create_date" property="createDate" javaType="String" />		<result column="modify_date" property="modifyDate" javaType="String" />						<result column="channel_id" property="channelId" javaType="String" />				<!-- by kai -->				<result column="cardurl" property="cardurl" javaType="String" />						<result column="third_create_date" property="thirdCreateDate" javaType="String" />						<result column="senduserphone" property="senduserphone"			javaType="String" />						<result column="senduserName" property="senduserName"			javaType="String" />		<result column="cardurlother" property="cardurlother"			javaType="String" />				<result column="cardurltogether" property="cardurltogether"			javaType="String" />							</resultMap>		<resultMap id="basic_result_map_fororder" type="com.weiye.model.Order">		<id column="id" property="id" javaType="String" />		<result column="order_id" property="orderId" javaType="String"/>		<result column="warehouse_id" property="warehouseId" javaType="String"/>		<result column="user_id" property="userId" javaType="String" />		<result column="type" property="type" javaType="String"/>		<result column="emp_id" property="empId" javaType="String" />		<result column="store_id" property="storeId" javaType="String" />		<result column="weight" property="weight" javaType="String" />		<result column="jwweight" property="jwweight" javaType="String" />				<result column="tariff" property="tariff" javaType="String" />		<result column="or" property="or" javaType="String" />		<result column="other" property="other" javaType="String" />		<result column="premium" property="premium" javaType="String" />		<result column="parce_value" property="parceValue" javaType="String" />		<result column="consignee_id" property="consigneeId" javaType="String" />		<result column="consignee_name" property="cName" javaType="String" />		<result column="consignee_province" property="cProvince"			javaType="String" />		<result column="consignee_city" property="cCity" javaType="String" />		<result column="consignee_district" property="cDistrict"			javaType="String" />		<result column="consignee_street_address" property="cStreetAddress"			javaType="String" />		<result column="consignee_zip_code" property="cZipCode"			javaType="String" />		<result column="consignee_phone" property="cPhone" javaType="String" />		<result column="cardurl" property="cardUrl" javaType="String" />		<result column="cardid" property="cardId" javaType="String" />		<result column="sea_no" property="seaNo" javaType="String" />						<result column="remark" property="remark" javaType="String" />		<result column="state" property="state" javaType="String" />		<result column="create_date" property="createDate" javaType="String" />		<result column="modify_date" property="modifyDate" javaType="String" />		<result column="mail" property="mail" javaType="String" />		<result column="third_pns" property="thirdPNS" javaType="String" />		<result column="third_no" property="thirdNo" javaType="String" />		<result column="batch_id" property="batchId" javaType="String" />		<result column="flight" property="flight" javaType="String" />		<result column="total_money" property="totalMoney" javaType="String"/>		<result column="length" property="length" javaType="String" />		<result column="width" property="width" javaType="String" />		<result column="height" property="height" javaType="String" />		<result column="channel_id" property="channelId" javaType="String" />				<!-- by kai -->		<result column="cardid" property="cardid" javaType="String" />		<result column="cardurl" property="cardurl" javaType="String" />		<result column="weight_kg" property="weightKg" javaType="String" />		<result column="address_all" property="addressAll" javaType="String" />		<result column="name_pinyi" property="NamePinyi" javaType="String" />		<result column="express_name" property="expressName" javaType="String" />		<result column="state_remark" property="stateRemark" javaType="String" />		<result column="CommodityCost" property="CommodityCost" javaType="String" />		<result column="senduser_zipcode" property="senduserZipcode" javaType="String" />		<result column="senduser_city" property="senduserCity" javaType="String" />		<result column="senduser_state" property="senduserState" javaType="String" />				<result column="third_create_date" property="thirdCreateDate" javaType="String" />		<result column="box_no" property="boxNo" javaType="String" />		<result column="pay_or_not" property="payOrNot" javaType="String" />		<result column="card_or_not" property="cardOrNot" javaType="String" />		<result column="commodity_third_list" property="commodityThirdList" javaType="String" />		<result column="import_remark" property="importRemark" javaType="String" />				<result column="base_money" property="baseMoney" javaType="String" />		<result column="third_brands" property="thirdBrands" javaType="String" />		<result column="type_key" property="typeKey" javaType="String" />				<result column="senduserphone" property="senduserphone"			javaType="String" />		<result column="senduserAddress" property="senduserAddress"			javaType="String" />					<result column="senduserName" property="senduserName"			javaType="String" />		<result column="cardurlother" property="cardurlother"			javaType="String" />				<result column="cardurltogether" property="cardurltogether"			javaType="String" />					<result column="tran_pro" property="tranPro" javaType="String" />		<result column="pay_to_china" property="payToChina" javaType="String"/>		<result column="pay_change_warehouse" property="payChangeWarehouse" javaType="String"/>			</resultMap>		<update id="modifyCardIdAndUrl">		update`order`		set `cardid`=#{cardId},		`cardurl`=#{cardUrl},		`cardurlother`=#{cardurlother},		`cardurltogether`=#{cardurltogether}		where order_id = #{orderId}	</update>		<update id="modifyOrderFlight">		update`order`		set `flight`=#{flight},		`modify_date`=#{date}		where id = #{id} and `state`='5'	</update>	<update id="modifyMultiOrderStateAndFlight">		update `order`		set `state`=#{state},		`modify_date`=#{date}		<if test="flight!=null and flight!=''">			,`flight`=#{flight}		</if>		<if test="thridpns!=null and thridpns!=''">			,`third_pns`=#{thridpns}		</if>		<if test="thridno!=null and thridno!=''">			,`third_no`=#{thridno}		</if>		where `order_id` in		<foreach collection="list" item="id" close=")" open="("			separator=",">			#{id}		</foreach>	</update><!-- 	<update id="modifyOrderStateOfExcel">		<foreach collection="list" item="item" separator=";">			update			`order`			set `state`=#{item.state},			<if test="(item.thirdPNS!=null and item.thirdPNS!='') or (item.thirdNo!=null and item.thirdNo!='')">				`third_pns`=#{item.thirdPNS},				`third_no`=#{item.thirdNo},			</if>			<if test="item.flight!=null and item.flight!=''">				`flight`=#{item.flight},			</if>			`modify_date`=#{item.modifyDate}			where `order_id` = #{item.orderId}		</foreach>	</update>  -->		<update id="modifyOrderStateOfExcel">		<foreach collection="list" item="item" separator=";">			update			`order`			set			<if test="item.state!=null and item.state!=''">			 `state`=#{item.state},						</if>			<if				test="(item.thirdPNS!=null and item.thirdPNS!='') or (item.thirdNo!=null and item.thirdNo!='')">				`third_pns`=#{item.thirdPNS},				`third_no`=#{item.thirdNo},			</if>			<if test="item.flight!=null and item.flight!=''">				`flight`=#{item.flight},			</if>			`modify_date`=#{item.modifyDate}			<!--  `state_remark`=#{item.state_remark}-->			where `order_id` = #{item.orderId}		</foreach>	</update>		<update id="updateEmptyOrder" parameterType="com.weiye.model.Order">		update `order`		set 		`user_id`=#{userId},		`consignee_name`=#{cName}, 		`consignee_province`=#{cProvince},		`consignee_city`=#{cCity},		`consignee_district`=#{cDistrict},		`consignee_street_address`=#{cStreetAddress},		`consignee_zip_code`=#{cZipCode},		`consignee_phone`=#{cPhone},		`remark`=#{remark}, 		`state`=#{state},		`create_date` = #{createDate},		`modify_date`=#{modifyDate},		`parce_value`=#{parceValue},		`premium`=#{premium},		`weight`=#{weight},		`tariff`=#{tariff},		`or`=#{or},		`other`=#{other},		`mail`=#{mail},		`length`=#{length},		`width`=#{width},		`height`=#{height},		`cardurl`=#{cardUrl},		`cardid`=#{cardId},		`total_money`=#{totalMoney}		where `order_id` = #{orderId}	</update>	<select id="getExportOrderByCreateData" resultMap="export_order_result_map">		select `order`.*		from `order`		where `order`.`create_date` <![CDATA[>=]]>#{sdate}		and `order`.`create_date` <![CDATA[<=]]>#{edate}	</select>		<select id="getExportToMeitaoOrder" resultMap="basic_result_map">		select distinct `order`.* from `order`		left join `users` as u		on		u.id=`order`.user_id		left join `order_detail` as od on		od.order_id=`order`.order_id		left join `transhipment_bill` as tb on		tb.id=od.transhipment_id		<where>		<!-- 		 `order`.store_id is null		and		(`order`.`state`='0' or `order`.`state`='1')		 -->		<choose>			<when test="orderId!=null and orderId!=''">				`order`.order_id like #{orderId}			</when>			<otherwise>				<if test="column!=null and column!='' and key!=null and key!=''">					${column} like #{key}				</if>				<if test="sdate!=null and sdate!=''">					and `order`.`create_date` <![CDATA[>=]]>					#{sdate}				</if>				<if test="edate!=null and edate!=''">					and `order`.`create_date` <![CDATA[<=]]>					#{edate}				</if>				<if test="wid!=null and wid!=''">					and `order`.`warehouse_id` = #{wid}				</if>				<choose>					<when test="state!=null and state!=''">						and `order`.`state`= #{state}					</when>					<otherwise>						and `order`.`state`!='-1'					</otherwise>				</choose>			</otherwise>		</choose>		</where>		order by `order`.create_date desc	</select>	<select id="searchMsjOrders" resultMap="basic_result_map">		select `order`.* from		`order` where `store_id` = #{storeId} and (state='1' or state='2')		<if test="typekey!=null and typekey!=''">					and `order`.`type_key` =#{typekey}		</if>		order by `order`.create_date desc		limit #{index},#{size}	</select>	<select id="countOfMsjOrder" parameterType="java.lang.String"		resultType="java.lang.Integer">		select count(*) from `order` where `store_id` = #{storeId}		and (state='1' or state='2')		<if test="typekey!=null and typekey!=''">					and `order`.`type_key` =#{typekey}		</if>	</select>	<select id="searchEmptyOrders" resultMap="basic_result_map">		select `order`.* from		`order` where `store_id` = #{storeId} and state='-1' 		<if test="orderKey!=null and orderKey!=''">				and `order_id` like #{orderKey}		</if>		order by `order`.modify_date desc		limit #{index},#{size}	</select>	<select id="countOfEmptyOrder" parameterType="java.lang.String"		resultType="java.lang.Integer">		select count(*) from `order` where `store_id` = #{storeId}		and state='-1' 		<if test="orderKey!=null and orderKey!=''">				and `order_id` like #{orderKey}		</if>	</select><!-- 	<insert id="insertOrder" parameterType="com.weiye.model.Order"		useGeneratedKeys="true" keyProperty="id">		insert into		`order`(`user_id`,`emp_id`,`store_id`,		`consignee_id`,		`consignee_name`, `consignee_province`,		`consignee_city`,`consignee_district`, `consignee_street_address`,		`consignee_zip_code`,`consignee_phone`, `remark`, `state`,		`create_date`,		`modify_date`,`premium`,`parce_value`,		`weight`,`tariff`,`or`,`other`,`mail`,`total_money`,`type`,`length`,`width`,`height`,		`warehouse_id`,`channel_id`, `card_url`, `card_id`		<if test="thirdNo!=null and thirdNo!=''">				,`order`.third_no 		</if>		)				values(#{userId},#{empId},#{storeId},		#{consigneeId},		#{cName},		#{cProvince},		#{cCity}, #{cDistrict},		#{cStreetAddress},		#{cZipCode},		#{cPhone},		#{remark}, #{state},		#{createDate},		#{modifyDate}, #{premium},		#{parceValue},		#{weight},#{tariff},#{or},#{other},#{mail},#{totalMoney},#{type},#{length},#{width},#{height},		#{warehouseId},#{channelId},#{cardUrl},#{cardId}		<if test="thirdNo!=null and thirdNo!=''">				,#{thirdNo} 		</if>		)	</insert>   -->	<!-- kai 20150913 添加weightKg元素 -->	<insert id="insertOrder" parameterType="com.weiye.model.Order"		useGeneratedKeys="true" keyProperty="id">		insert into		`order`(`user_id`,`emp_id`,`store_id`,		`consignee_id`,		`consignee_name`, `consignee_province`,		`consignee_city`,`consignee_district`, `consignee_street_address`,		`consignee_zip_code`,`consignee_phone`, `remark`, `state`,		`create_date`,		`modify_date`,`premium`,`parce_value`,		`weight`,`tariff`,`or`,`other`,`mail`,`total_money`,`type`,`length`,`width`,`height`,		`warehouse_id`,`channel_id`,`cardid`,`cardurl`,`weight_kg`,`address_all`,`name_pinyi`,		`express_name`,`senduserphone`,`senduserAddress`,`senduserName`,`cardurlother`,		`cardurltogether`,`tran_pro`,`CommodityCost`,`jwweight`,`type_key`)		values(#{userId},#{empId},#{storeId},		#{consigneeId},		#{cName},		#{cProvince},		#{cCity}, #{cDistrict},		#{cStreetAddress},		#{cZipCode},		#{cPhone},		#{remark}, #{state},		#{createDate},		#{modifyDate}, #{premium},		#{parceValue},		#{weight},#{tariff},#{or},#{other},#{mail},#{totalMoney},#{type},#{length},#{width},#{height},		#{warehouseId},#{channelId},#{cardid},#{cardurl},#{weightKg},#{addressAll},#{NamePinyi},		#{expressName},#{senduserphone},#{senduserAddress},#{senduserName},#{cardurlother},		#{cardurltogether},#{tranPro},#{CommodityCost},#{jwweight},#{typeKey})	</insert><insert id="insertthirdOrder" parameterType="com.weiye.model.Order"		useGeneratedKeys="true" keyProperty="id">		insert into		`order`(`user_id`,`emp_id`,`store_id`,		`consignee_id`,		`consignee_name`, `consignee_province`,		`consignee_city`,`consignee_district`, `consignee_street_address`,		`consignee_zip_code`,`consignee_phone`, `remark`, `state`,		`create_date`,		`modify_date`,`premium`,`parce_value`,		`weight`,`tariff`,`or`,`other`,`mail`,`total_money`,`type`,`length`,`width`,`height`,`warehouse_id`,`channel_id`,		`cardid`,`cardurl`,`weight_kg`,`address_all`,`name_pinyi`,`express_name`,`senduserphone`,`senduserAddress`,`senduserName`,		`cardurlother`,`cardurltogether`,`tran_pro`,`order_id`,`box_no`,`pay_or_not`,`card_or_not`,`commodity_third_list`,`import_remark`,`base_money`,		`third_create_date`,`third_brands`,`flight`,`senduser_zipcode`,`senduser_city`,`senduser_state`,`type_key`)		values(#{userId},#{empId},#{storeId},		#{consigneeId},		#{cName},		#{cProvince},		#{cCity}, #{cDistrict},		#{cStreetAddress},		#{cZipCode},		#{cPhone},		#{remark}, #{state},		#{createDate},		#{modifyDate}, #{premium},		#{parceValue},		#{weight},#{tariff},#{or},#{other},#{mail},#{totalMoney},#{type},#{length},#{width},#{height},#{warehouseId},#{channelId},		#{cardid},#{cardurl},#{weightKg},#{addressAll},#{NamePinyi},#{expressName},#{senduserphone},#{senduserAddress},#{senduserName},		#{cardurlother},#{cardurltogether},#{tranPro},#{orderId},#{boxNo},#{payOrNot},#{cardOrNot},#{commodityThirdList},#{importRemark},		#{baseMoney},#{thirdCreateDate},#{thirdBrands},#{flight},#{senduserZipcode},#{senduserCity},#{senduserState},#{typeKey}		)	</insert>		<insert id="insertthirdOrder1" parameterType="com.weiye.model.Order"		useGeneratedKeys="true" keyProperty="id">		insert into		`order`(`user_id`,`emp_id`,`store_id`,		`consignee_id`,		`consignee_name`, `consignee_province`,		`consignee_city`,`consignee_district`, `consignee_street_address`,		`consignee_zip_code`,`consignee_phone`, `remark`, `state`,		`create_date`,		`modify_date`,`premium`,`parce_value`,		`weight`,`tariff`,`or`,`other`,`mail`,`total_money`,`type`,`length`,`width`,`height`,`warehouse_id`,`channel_id`,		`cardid`,`cardurl`,`weight_kg`,`address_all`,`name_pinyi`,`express_name`,`senduserphone`,`senduserAddress`,`senduserName`,		`cardurlother`,`cardurltogether`,`tran_pro`,`order_id`,`box_no`,`pay_or_not`,`card_or_not`,`commodity_third_list`,`import_remark`,`base_money`,`third_create_date`)			values(#{userId},#{empId},#{storeId},		#{consigneeId},		#{cName},		#{cProvince},		#{cCity}, #{cDistrict},		#{cStreetAddress},		#{cZipCode},		#{cPhone},		#{remark}, #{state},		#{createDate},		#{modifyDate}, #{premium},		#{parceValue},		#{weight},#{tariff},#{or},#{other},#{mail},#{totalMoney},#{type},#{length},#{width},#{height},#{warehouseId},#{channelId},		#{cardid},#{cardurl},#{weightKg},#{addressAll},#{NamePinyi},#{expressName},#{senduserphone},#{senduserAddress},#{senduserName},		#{cardurlother},#{cardurltogether},#{tranPro},#{orderId},#{boxNo},#{payOrNot},#{cardOrNot},#{commodityThirdList},#{importRemark},#{baseMoney},#{thirdCreateDate})	</insert>	<insert id="insertEmptyOrders" parameterType="com.weiye.model.Order" useGeneratedKeys="true" keyProperty="id">		insert into `order`(`state`) values(#{state})	</insert>	<select id="countOfUserId" parameterType="java.lang.String"		resultType="java.lang.Integer">		select count(*) from `order` where user_id=#{userId}	</select>	<select id="searchByUserId" resultMap="basic_result_map">		select * from `order` where user_id=#{userId}		order by `order`.create_date desc		limit #{index},#{size}	</select>	<select id="getById" resultMap="basic_result_map">		select * from `order` o where o.id=#{id}	</select>	<select id="getByOrderId" resultMap="basic_result_map">		select *, s.name AS storage_position_storage_name, p.col_number AS storage_position_col_number, p.row_number AS storage_position_row_number 		from `order`		LEFT JOIN storage_position_record r ON r.relate_id=`order`.id 		LEFT JOIN storage_position p ON p.id=r.storage_position_id 		LEFT JOIN `storage` s ON s.id=p.storage_id AND s.type='2' AND s.warehouse_id=`order`.warehouse_id AND s.type_relate_id=`order`.channel_id  		where `order_id`=#{orderId} limit 1	</select>	<select id="getByTranshipmentIds" resultMap="basic_result_map">		select distinct `order`.*		from `order` left join order_detail on		order_detail.order_id=`order`.order_id		<foreach collection="list" item="id"			open="where order_detail.transhipment_id in (" close=")" separator=",">			#{id}		</foreach>	</select>	<select id="countOfSearchKeys" resultType="java.lang.Integer">		select count(distinct `order`.id) 		from `order`		left join `users` as u		on u.id=`order`.user_id		<!-- left join `order_detail` as od on		od.order_id=`order`.order_id		left join `transhipment_bill` as tb on		tb.id=od.transhipment_id -->		<where>			<if test="orderId!=null and orderId!=''">				`order`.order_id like #{orderId}			<if test="storeId!=null and storeId!=''">				<choose>					<when test="state==null or state==''">						and ( `order`.`warehouse_id` =#{storeId} or `order`.`state`= '-10' )					</when>					<otherwise>						and  `order`.`warehouse_id` =#{storeId} 					</otherwise>				</choose>			</if>			</if>			<if test="column!=null and column!='' and key!=null and key!=''">				and ${column} like #{key}			</if>			<if test="sdate!=null and sdate!=''">				and `order`.`create_date` <![CDATA[>=]]>				#{sdate}			</if>			<if test="edate!=null and edate!=''">				and `order`.`create_date` <![CDATA[<=]]>				#{edate}			</if>			<if test="userId!=null and userId!=''">				and `order`.`user_id`=#{userId}			</if>			<if test="typekey!=null and typekey!=''">					and `order`.`type_key` =#{typekey}			</if>			<if test="storeId!=null and storeId!=''">				<choose>					<when test="state==null or state==''">						and ( `order`.`warehouse_id` =#{storeId} or `order`.`state`= '-10' )					</when>					<otherwise>						and  `order`.`warehouse_id` =#{storeId} 					</otherwise>				</choose>			</if>			<choose>				<when test="state!=null and state!=''">					and `order`.`state`= #{state}				</when>				<otherwise>					<if test="userId==null or userId==''">						and `order`.`state`!='-1'					</if>									</otherwise>			</choose>		</where>	</select>	<select id="searchByKeys" resultMap="basic_result_map">		select distinct `order`.* 		from `order`		left join `users` as u on		u.id=`order`.user_id		<!-- left join `order_detail` as od on		od.order_id=`order`.order_id		left join `transhipment_bill` as tb on		tb.id=od.transhipment_id -->		LEFT JOIN storage_position_record r ON r.relate_id=`order`.id 		LEFT JOIN storage_position p ON p.id=r.storage_position_id 		LEFT JOIN `storage` s ON s.id=p.storage_id AND s.type='2' AND s.warehouse_id=`order`.warehouse_id AND s.type_relate_id=`order`.channel_id		<where>			<if test="orderId!=null and orderId!=''">				`order`.order_id like #{orderId}				<if test="storeId!=null and storeId!=''">				<choose>					<when test="state==null or state==''">						and ( `order`.`warehouse_id` =#{storeId} or `order`.`state`= '-10' )					</when>					<otherwise>						and  `order`.`warehouse_id` =#{storeId} 					</otherwise>				</choose>			</if>			</if>			<if test="column!=null and column!='' and key!=null and key!=''">				and ${column} like #{key}			</if>			<if test="sdate!=null and sdate!=''">				and `order`.`create_date` <![CDATA[>=]]>				#{sdate}			</if>			<if test="edate!=null and edate!=''">				and `order`.`create_date` <![CDATA[<=]]>				#{edate}			</if>			<if test="userId!=null and userId!=''">				and `order`.`user_id`=#{userId}			</if>			<if test="typekey!=null and typekey!=''">					and `order`.`type_key` =#{typekey}			</if>			<if test="storeId!=null and storeId!=''">				<choose>					<when test="state==null or state==''">						and ( `order`.`warehouse_id` =#{storeId} or `order`.`state`= '-10' )					</when>					<otherwise>						and  `order`.`warehouse_id` =#{storeId} 					</otherwise>				</choose>			</if>			<choose>				<when test="state!=null and state!=''">					and `order`.`state`= #{state}				</when>				<otherwise>					<if test="userId==null or userId==''">						and `order`.`state`!='-1'					</if>				</otherwise>			</choose>		</where>		order by `order`.`create_date` desc		limit		#{index},#{size}	</select>				<select id="countOfWebOrder" resultType="java.lang.Integer">		select count(distinct `order`.id) from `order`		<!-- left join `users` as u		on u.id=`order`.user_id		left join `order_detail` as od on		od.order_id=`order`.order_id		left join `transhipment_bill` as tb on		tb.id=od.transhipment_id -->		<where>		<!-- 		 `order`.store_id is null		and		(`order`.`state`='0' or `order`.`state`='1')		 -->		<choose>			<when test="orderId!=null and orderId!=''">				`order`.order_id like #{orderId}			<if test="storeId!=null and storeId!=''">				<choose>					<when test="state==null or state==''">						and ( `order`.`warehouse_id` =#{storeId} or `order`.`state`= '-10' )					</when>					<otherwise>						and  `order`.`warehouse_id` =#{storeId} 					</otherwise>				</choose>			</if>							</when>			<otherwise>				<if test="column!=null and column!='' and key!=null and key!=''">					${column} like #{key}				</if>				<if test="sdate!=null and sdate!=''">					and `order`.`create_date` <![CDATA[>=]]>					#{sdate}				</if>				<if test="edate!=null and edate!=''">					and `order`.`create_date` <![CDATA[<=]]>					#{edate}				</if>								<if test="typekey!=null and typekey!=''">					and `order`.`type_key` =#{typekey}				</if>							<if test="storeId!=null and storeId!=''">				<choose>					<when test="state==null or state==''">						and ( `order`.`warehouse_id` =#{storeId} or `order`.`state`= '-10' )					</when>					<otherwise>						and  `order`.`warehouse_id` =#{storeId} 					</otherwise>				</choose>			</if>				<choose>					<when test="state!=null and state!=''">						and `order`.`state`= #{state}					</when>					<otherwise>						and `order`.`state`!='-1'					</otherwise>				</choose>			</otherwise>		</choose>		</where>	</select>		<select id="countOfWebOrderincludewidcid" resultType="java.lang.Integer">		select count(distinct `order`.id) from `order`		left join `users` as u		on u.id=`order`.user_id		<!--left join `order_detail` as od on		od.order_id=`order`.order_id		left join `transhipment_bill` as tb on		tb.id=od.transhipment_id  -->		<where>		<!-- 		 `order`.store_id is null		and		(`order`.`state`='0' or `order`.`state`='1')		 -->		<choose>			<when test="orderId!=null and orderId!=''">				`order`.order_id like #{orderId}			</when>			<otherwise>				<if test="column!=null and column!='' and key!=null and key!=''">					${column} like #{key}				</if>				<if test="sdate!=null and sdate!=''">					and `order`.`create_date` <![CDATA[>=]]>					#{sdate}				</if>				<if test="edate!=null and edate!=''">					and `order`.`create_date` <![CDATA[<=]]>					#{edate}				</if>				<if test="wid!=null and wid!=''">					and `order`.`warehouse_id`= #{wid}				</if>				<if test="cid!=null and cid!=''">					and `order`.`channel_id`= #{cid}				</if>				<if test="typekey!=null and typekey!=''">					and `order`.`type_key` =#{typekey}				</if>				<choose>					<when test="state!=null and state!=''">						and `order`.`state`= #{state}					</when>					<otherwise>						and `order`.`state`!='-1'					</otherwise>				</choose>			</otherwise>		</choose>		</where>	</select>	<select id="searchWebOrders" resultMap="basic_result_map">		select distinct `order`.*,			s.name AS storage_position_storage_name, p.col_number AS storage_position_col_number, p.row_number AS storage_position_row_number 		from `order`		<!-- left join `users` as u on u.id=`order`.user_id		left join `order_detail` as od on od.order_id=`order`.order_id		left join `transhipment_bill` as tb on tb.id=od.transhipment_id -->		LEFT JOIN storage_position_record r ON r.relate_id=`order`.id 		LEFT JOIN storage_position p ON p.id=r.storage_position_id 		LEFT JOIN `storage` s ON s.id=p.storage_id AND s.type='2' AND s.warehouse_id=`order`.warehouse_id AND s.type_relate_id=`order`.channel_id		 		<where>		<!-- 		 `order`.store_id is null		and		(`order`.`state`='0' or `order`.`state`='1')		 -->		<choose>			<when test="orderId!=null and orderId!=''">				`order`.order_id like #{orderId}											<if test="storeId!=null and storeId!=''">				<choose>					<when test="state==null or state==''">						and ( `order`.`warehouse_id` =#{storeId} or `order`.`state`= '-10' )					</when>					<otherwise>						and  `order`.`warehouse_id` =#{storeId} 					</otherwise>				</choose>			</if>			</when>			<otherwise>				<if test="column!=null and column!='' and key!=null and key!=''">					${column} like #{key}				</if>				<if test="sdate!=null and sdate!=''">					and `order`.`create_date` <![CDATA[>=]]>					#{sdate}				</if>				<if test="edate!=null and edate!=''">					and `order`.`create_date` <![CDATA[<=]]>					#{edate}				</if>								<if test="typekey!=null and typekey!=''">					and `order`.`type_key` =#{typekey}				</if>								<if test="storeId!=null and storeId!=''">				<choose>					<when test="state==null or state==''">						and ( `order`.`warehouse_id` =#{storeId} or `order`.`state`= '-10' )					</when>					<otherwise>						and  `order`.`warehouse_id` =#{storeId} 					</otherwise>				</choose>			</if>				<choose>					<when test="state!=null and state!=''">						and `order`.`state`= #{state}					</when>					<otherwise>						and `order`.`state`!='-1'					</otherwise>				</choose>			</otherwise>		</choose>		</where>		order by `order`.create_date desc		limit		#{index},#{size}	</select>			<select id="searchWebOrdersincludewidcid" resultMap="basic_result_onlyorder_map">		select  distinct `order`.* from `order`		left join `users` as u		on		u.id=`order`.user_id 		<!-- left join `order_detail` as od on		od.order_id=`order`.order_id		left join `transhipment_bill` as tb on		tb.id=od.transhipment_id -->		<where>		<!-- 		 `order`.store_id is null		and		(`order`.`state`='0' or `order`.`state`='1')		 -->		<choose>			<when test="orderId!=null and orderId!=''">				`order`.order_id like #{orderId}			</when>			<otherwise>				<if test="column!=null and column!='' and key!=null and key!=''">					${column} like #{key}				</if>				<if test="sdate!=null and sdate!=''">					and `order`.`create_date` <![CDATA[>=]]>					#{sdate}				</if>				<if test="edate!=null and edate!=''">					and `order`.`create_date` <![CDATA[<=]]>					#{edate}				</if>				<if test="wid!=null and wid!=''">					and `order`.`warehouse_id`= #{wid}				</if>				<if test="cid!=null and cid!=''">					and `order`.`channel_id`= #{cid}				</if>				<if test="typekey!=null and typekey!=''">					and `order`.`type_key` =#{typekey}				</if>				<choose>					<when test="state!=null and state!=''">						and `order`.`state`= #{state}					</when>					<otherwise>						and `order`.`state`!='-1'					</otherwise>				</choose>			</otherwise>		</choose>		</where>		order by `order`.create_date desc		limit		#{index},#{size}	</select>	<select id="searchinsertcardurlinfo" resultMap="basic_result_map">		select `order`.* from `order`		<where>		`order`.`order_id`= #{orderId} and `order`.`consignee_name`= #{cname} and `order`.`consignee_phone`= #{cphone}		</where>			</select>	<delete id="deleteByOrderIds">		delete from `order`		where `order_id` in		<foreach collection="ids" item="id" open="(" close=")"			separator=",">			#{id}		</foreach>		and state in		<foreach collection="states" item="state" open="(" close=")"			separator=",">			#{state}		</foreach>	</delete>	<update id="modifyOrderPay">		update `order`		set `state`=#{state},		`pay_date`=#{payDate}		where `id` in		<foreach collection="list" item="id" open="(" close=")"			separator=",">			${id}		</foreach>	</update><!-- 	<update id="modifyOrder" parameterType="com.weiye.model.Order">		update `order`		set		`state`=#{state},		`weight`=#{weight},		`tariff`=#{tariff},		`or`=#{or},		`other`=#{other},		`mail`=#{mail},		`modify_date`=#{modifyDate},		`remark`=#{remark},				`warehouse_id`=#{warehouseId},		`store_id`=#{storeId},				`parce_value`=#{parceValue},		`length`=#{length},		`width`=#{width},		`height`=#{height},				`consignee_name`=#{cName},		`consignee_province`=#{cProvince},		`consignee_city`=#{cCity},		`consignee_district`=#{cDistrict},		`consignee_street_address`=#{cStreetAddress},		`consignee_zip_code`=#{cZipCode},		`consignee_phone`=#{cPhone},		`total_money`=#{totalMoney},		`channel_id`=#{channelId}		<if test="thirdNo!=null and thirdNo!=''">			,`third_no`=#{thirdNo}  		</if>		where `order_id` = #{orderId} or `id` = #{id}	</update>  -->	<!-- kai 20150911 -->	<update id="modifyOrder000" parameterType="com.weiye.model.Order">		update `order`		set		`state`=#{state},		`weight`=#{weight},		`tariff`=#{tariff},		`or`=#{or},		`other`=#{other},		`premium`=#{premium},				`mail`=#{mail},		`modify_date`=#{modifyDate},		`remark`=#{remark},		`warehouse_id`=#{warehouseId},		`store_id`=#{storeId},		`parce_value`=#{parceValue},		`length`=#{length},		`width`=#{width},		`height`=#{height},		`consignee_name`=#{cName},		`consignee_province`=#{cProvince},		`consignee_city`=#{cCity},		`consignee_district`=#{cDistrict},		`consignee_street_address`=#{cStreetAddress},		`consignee_zip_code`=#{cZipCode},		`consignee_phone`=#{cPhone},		`total_money`=#{totalMoney},		`channel_id`=#{channelId},		`cardid`=#{cardid},		`weight_kg`=#{weightKg},		`tran_pro`=#{tranPro},				`commodity_third_list`=#{commodityThirdList},		`third_brands`=#{thirdBrands},		`import_remark`=#{importRemark},		`third_create_date`=#{thirdCreateDate},		`flight`=#{flight},		`box_no`=#{boxNo},		`pay_or_not`=#{payOrNot},		`card_or_not`=#{cardOrNot},		`base_money`=#{baseMoney},		`express_name`=#{expressName},		`CommodityCost`=#{CommodityCost}		where `order_id` =		#{orderId} or `id` = #{id}	</update><!-- kai 20160224 -->	<update id="modifyOrder" parameterType="com.weiye.model.Order">		update `order`		set		`state`=#{state},		`weight`=#{weight},		`jwweight`=#{jwweight},		`tariff`=#{tariff},		`or`=#{or},		`other`=#{other},		`mail`=#{mail},		`modify_date`=#{modifyDate},		`remark`=#{remark},		`warehouse_id`=#{warehouseId},		`store_id`=#{storeId},		`parce_value`=#{parceValue},		`length`=#{length},		`width`=#{width},		`height`=#{height},				`premium`=#{premium},		`consignee_name`=#{cName},		`consignee_province`=#{cProvince},		`consignee_city`=#{cCity},		`consignee_district`=#{cDistrict},		`consignee_street_address`=#{cStreetAddress},		`consignee_zip_code`=#{cZipCode},		`consignee_phone`=#{cPhone},		`total_money`=#{totalMoney},		`channel_id`=#{channelId},		`cardid`=#{cardid},		`weight_kg`=#{weightKg},		`tran_pro`=#{tranPro},				`commodity_third_list`=#{commodityThirdList},		`third_brands`=#{thirdBrands},		`import_remark`=#{importRemark},		`third_create_date`=#{thirdCreateDate},		`flight`=#{flight},		`box_no`=#{boxNo},		`pay_or_not`=#{payOrNot},		`card_or_not`=#{cardOrNot},		`base_money`=#{baseMoney},		`express_name`=#{expressName},		`CommodityCost`=#{CommodityCost},		`senduser_zipcode`=#{senduserZipcode},		`senduser_city`=#{senduserCity},		`senduser_state`=#{senduserState},		`senduserAddress`=#{senduserAddress}								where `order_id` =		#{orderId} or `id` = #{id}	</update>		<update id="modifyEmptyOrder" parameterType="com.weiye.model.Order">		update `order`		set		`user_id`=#{userId},		`weight`=#{weight},		`tariff`=#{tariff},		`or`=#{or},		`other`=#{other},		`premium`=#{premium},		`parce_value`=#{parceValue},		`mail`=#{mail},		`modify_date`=#{modifyDate},		`remark`=#{remark},		`state`=#{state},		`emp_id`=#{empId},		`store_id`=#{storeId},		`consignee_name`=#{cName},		`consignee_province`=#{cProvince},		`consignee_city`=#{cCity},		`consignee_district`=#{cDistrict},		`consignee_street_address`=#{cStreetAddress},		`consignee_zip_code`=#{cZipCode},		`consignee_phone`=#{cPhone},		`total_money`=#{totalMoney},		`type`=#{type},		`length`=#{length},		`width`=#{width},		`height`=#{height},		`channel_id`=#{channelId}		<if test="thirdNo!=null and thirdNo!=''">			,`third_no`=#{thirdNo}  		</if>		where `order_id` = #{orderId} or `id` = #{id}	</update>		<select id="getOrderByStateAndFlight" resultMap="basic_result_map">		select * from `order`		where `order`.`state` = #{state}		<if test="flight != null and flight != ''">			and `order`.flight = #{flight}		</if>		order by `order`.`id`	</select>		<select id="getOrderByIds" resultMap="basic_result_map">		select * from `order`		where `order`.`id` in		<foreach collection="list" item="id" open="(" close=")" separator=",">			#{id}		</foreach>		order by `order`.`id`	</select>	<select id="getOrderByOrderIds" resultMap="basic_result_map">		select * from `order`		where `order`.`order_id` in		<foreach collection="list" item="id" open="(" close=")" separator=",">			#{id}		</foreach>		order by `order`.`id`	</select>	<select id="getExportOrderByOrderIds" resultMap="export_order_result_map">		select * from `order`		where `order`.`order_id` in		<foreach collection="list" item="id" open="(" close=")"			separator=",">			#{id}		</foreach>		order by `order`.`id`	</select>		<update id="modifyOrderId">		update `order`		set `order_id` = #{orderId}		where `id`=#{id}	</update>		<update id="modifyTotalMoneyByOrderId">		update `order`		set `total_money` = #{totalMoney}		where `id`=#{id}	</update>	<select id="getOrderOfOrderId" resultMap="basic_result_map">		select *		from `order`		<where>			<if test="soid!=null and soid!=''">				`order_id` <![CDATA[>=]]> #{soid}			</if>			<if test="eoid!=null and eoid!=''">				and `order_id` <![CDATA[<=]]> #{eoid}			</if>			<if test="state!=null and state!=''">				and `state` = #{state}			</if>		</where>		limit #{size}	</select>			<select id="getRetailOrderCount" resultType="java.lang.Integer">		select count(id) from `order` where `state` = '-1'	</select>	<select id="getRecvNameByOrderId" resultType="java.lang.Integer">		select *		from `order` 		<where>			<if test="orderid!=null and orderid!=''">				`order_id` <![CDATA[>=]]> #{orderId}			</if>		</where>		limit 1	</select>			<!-- 添加由用户修改的接口 kai 20160224-->	<update id="modifyOrderbyuser" parameterType="com.weiye.model.Order">		update `order`		set		`state`=#{state},		`weight`=#{weight},		`premium`=#{premium},		`tariff`=#{tariff},		`or`=#{or},		`other`=#{other},		`mail`=#{mail},		`modify_date`=#{modifyDate},		`remark`=#{remark},		`cardid`=#{cardid},		`cardurl`=#{cardurl},		`cardurlother`=#{cardurlother},		`cardurltogether`=#{cardurltogether},		`parce_value`=#{parceValue},		`length`=#{length},		`width`=#{width},		`height`=#{height},				 `senduserphone` = #{senduserphone},			 `senduserName` = #{senduserName},		`consignee_name`=#{cName},		`consignee_province`=#{cProvince},		`consignee_city`=#{cCity},		`consignee_district`=#{cDistrict},		`consignee_street_address`=#{cStreetAddress},		`consignee_zip_code`=#{cZipCode},		`consignee_phone`=#{cPhone},		`total_money`=#{totalMoney},		`warehouse_id`=#{warehouseId},		`channel_id`=#{channelId}		where `user_id` = #{userId} and `order_id` =		#{orderId}	</update>	<!-- kai 20150919 只更新特定订单的url,20150922 -->	<update id="modifyOrderurlonly" parameterType="com.weiye.model.Order">		update `order`		set		`cardurl`=#{cardurl},		`cardurlother`=#{cardurlother},		`cardurltogether`=#{cardurltogether}		where `order_id` = #{orderId}		<!-- kai 20150919-1 网上置单时的更新 -->	</update><!-- kai 20160224 -->	<update id="modifyOrderonlineadmin" parameterType="com.weiye.model.Order">		update `order`		set		`state`=#{state},		`weight`=#{weight},		`jwweight`=#{jwweight},		`tariff`=#{tariff},		`or`=#{or},		`other`=#{other},		`mail`=#{mail},		`modify_date`=#{modifyDate},		`remark`=#{remark},		`warehouse_id`=#{warehouseId},		`store_id`=#{storeId},		`parce_value`=#{parceValue},		`length`=#{length},		`width`=#{width},		`height`=#{height},		`premium`=#{premium},		`consignee_name`=#{cName},		`consignee_province`=#{cProvince},		`consignee_city`=#{cCity},		`consignee_district`=#{cDistrict},		`consignee_street_address`=#{cStreetAddress},		`consignee_zip_code`=#{cZipCode},		`consignee_phone`=#{cPhone},		`total_money`=#{totalMoney},		`channel_id`=#{channelId},		`cardid`=#{cardid},		`warehouse_id`=#{warehouseId},		`weight_kg`=#{weightKg},		`CommodityCost`=#{CommodityCost}				where `order_id` = #{orderId} or `id` = #{id}	</update>	<select id="getByExportOrderId" resultMap="export_order_result_map">		select * from `order` 		where `order_id`=#{orderId} 		<if test="wid!=null and wid!=''">				and `warehouse_id` = #{wid}		</if>		limit 1	</select>			<select id="countOfWebOrderbelonguser" resultType="java.lang.Integer">		select count(distinct `order`.id) from `order`		left join `users` as u		on u.id=`order`.user_id		<!--  left join `order_detail` as od on		od.order_id=`order`.order_id		left join `transhipment_bill` as tb on		tb.id=od.transhipment_id-->		<where>		<!-- 		 `order`.store_id is null		and		(`order`.`state`='0' or `order`.`state`='1')		 -->		<choose>			<when test="orderId!=null and orderId!=''">				`order`.order_id like #{orderId}						<if test="storeId!=null and storeId!=''">				<choose>					<when test="state==null or state==''">						and ( `order`.`warehouse_id` =#{storeId} or `order`.`state`= '-10' )					</when>					<otherwise>						and  `order`.`warehouse_id` =#{storeId} 					</otherwise>				</choose>			</if>			</when>			<otherwise>				<if test="key!=null and key!=''">					(u.real_name like #{key} or u.phone like #{key} or u.email like #{key} or u.nick_name like #{key})									</if>				<if test="sdate!=null and sdate!=''">					and `order`.`create_date` <![CDATA[>=]]>					#{sdate}				</if>				<if test="edate!=null and edate!=''">					and `order`.`create_date` <![CDATA[<=]]>					#{edate}				</if>											<if test="typekey!=null and typekey!=''">					and `order`.`type_key` =#{typekey}				</if>			<if test="storeId!=null and storeId!=''">				<choose>					<when test="state==null or state==''">						and ( `order`.`warehouse_id` =#{storeId} or `order`.`state`= '-10' )					</when>					<otherwise>						and  `order`.`warehouse_id` =#{storeId} 					</otherwise>				</choose>			</if>				<choose>					<when test="state!=null and state!=''">						and `order`.`state`= #{state}					</when>					<otherwise>						and `order`.`state`!='-1'					</otherwise>				</choose>			</otherwise>		</choose>		</where>	</select>		<select id="searchWebOrdersbelonguser" resultMap="basic_result_map">		select distinct `order`.* from `order`		left join `users` as u		on		u.id=`order`.user_id		<!-- left join `order_detail` as od on		od.order_id=`order`.order_id		left join `transhipment_bill` as tb on		tb.id=od.transhipment_id -->		<where>		<!-- 		 `order`.store_id is null		and		(`order`.`state`='0' or `order`.`state`='1')		 -->		<choose>			<when test="orderId!=null and orderId!=''">				`order`.order_id like #{orderId}						<if test="storeId!=null and storeId!=''">				<choose>					<when test="state==null or state==''">						and ( `order`.`warehouse_id` =#{storeId} or `order`.`state`= '-10' )					</when>					<otherwise>						and  `order`.`warehouse_id` =#{storeId} 					</otherwise>				</choose>			</if>							</when>			<otherwise>				<if test="key!=null and key!=''">					(u.real_name like #{key} or u.phone like #{key} or u.email like #{key} or u.nick_name like #{key})				</if>				<if test="sdate!=null and sdate!=''">					and `order`.`create_date` <![CDATA[>=]]>					#{sdate}				</if>				<if test="edate!=null and edate!=''">					and `order`.`create_date` <![CDATA[<=]]>					#{edate}				</if>					<if test="typekey!=null and typekey!=''">					and `order`.`type_key` =#{typekey}				</if>					<if test="storeId!=null and storeId!=''">				<choose>					<when test="state==null or state==''">						and ( `order`.`warehouse_id` =#{storeId} or `order`.`state`= '-10' )					</when>					<otherwise>						and  `order`.`warehouse_id` =#{storeId} 					</otherwise>				</choose>			</if>				<choose>					<when test="state!=null and state!=''">						and `order`.`state`= #{state}					</when>					<otherwise>						and `order`.`state`!='-1'					</otherwise>				</choose>			</otherwise>		</choose>		</where>		order by `order`.create_date desc		limit		#{index},#{size}	</select>		<select id="countOfWebOrderincludewidcidbyownuser" resultType="java.lang.Integer">		select count(distinct `order`.id) from `order`		left join `users` as u		on u.id=`order`.user_id		<!-- left join `order_detail` as od on		od.order_id=`order`.order_id		left join `transhipment_bill` as tb on		tb.id=od.transhipment_id -->		<where>		<!-- 		 `order`.store_id is null		and		(`order`.`state`='0' or `order`.`state`='1')		 -->		<choose>			<when test="orderId!=null and orderId!=''">				`order`.order_id like #{orderId}			</when>			<otherwise>				<if test="key!=null and key!=''">					(u.real_name like #{key} or u.phone like #{key} or u.email like #{key} or u.nick_name like #{key})				</if>				<if test="sdate!=null and sdate!=''">					and `order`.`create_date` <![CDATA[>=]]>					#{sdate}				</if>				<if test="edate!=null and edate!=''">					and `order`.`create_date` <![CDATA[<=]]>					#{edate}				</if>				<if test="wid!=null and wid!=''">					and `order`.`warehouse_id`= #{wid}				</if>				<if test="cid!=null and cid!=''">					and `order`.`channel_id`= #{cid}				</if>				<if test="typekey!=null and typekey!=''">					and `order`.`type_key` =#{typekey}				</if>					<choose>					<when test="state!=null and state!=''">						and `order`.`state`= #{state}					</when>					<otherwise>						and `order`.`state`!='-1'					</otherwise>				</choose>			</otherwise>		</choose>		</where>	</select>		<select id="searchWebOrdersincludewidcidbyownuser" resultMap="basic_result_map">		select distinct `order`.* from `order`		left join `users` as u		on		u.id=`order`.user_id		<!-- left join `order_detail` as od on		od.order_id=`order`.order_id		left join `transhipment_bill` as tb on		tb.id=od.transhipment_id -->		<where>		<!-- 		 `order`.store_id is null		and		(`order`.`state`='0' or `order`.`state`='1')		 -->		<choose>			<when test="orderId!=null and orderId!=''">				`order`.order_id like #{orderId}			</when>			<otherwise>				<if test="key!=null and key!=''">					(u.real_name like #{key} or u.phone like #{key} or u.email like #{key} or u.nick_name like #{key})				</if>				<if test="sdate!=null and sdate!=''">					and `order`.`create_date` <![CDATA[>=]]>					#{sdate}				</if>				<if test="edate!=null and edate!=''">					and `order`.`create_date` <![CDATA[<=]]>					#{edate}				</if>				<if test="wid!=null and wid!=''">					and `order`.`warehouse_id`= #{wid}				</if>				<if test="cid!=null and cid!=''">					and `order`.`channel_id`= #{cid}				</if>				<if test="typekey!=null and typekey!=''">					and `order`.`type_key` =#{typekey}				</if>					<choose>					<when test="state!=null and state!=''">						and `order`.`state`= #{state}					</when>					<otherwise>						and `order`.`state`!='-1'					</otherwise>				</choose>			</otherwise>		</choose>		</where>		order by `order`.create_date desc		limit		#{index},#{size}	</select>		<select id="countOfWebOrderincludenopay" resultType="java.lang.Integer">		select count(distinct `order`.id) from `order`		left join `users` as u		on u.id=`order`.user_id		left join `order_detail` as od on		od.order_id=`order`.order_id		left join `transhipment_bill` as tb on		tb.id=od.transhipment_id		<where>		<!-- 		 `order`.store_id is null		and		(`order`.`state`='0' or `order`.`state`='1')		 -->		<choose>			<when test="orderId!=null and orderId!=''">				`order`.order_id like #{orderId}			</when>			<otherwise>				<if test="key!=null and key!=''">					(u.real_name like #{key} or u.phone like #{key} or u.email like #{key} or u.nick_name like #{key})				</if>				<if test="sdate!=null and sdate!=''">					and `order`.`create_date` <![CDATA[>=]]>					#{sdate}				</if>				<if test="edate!=null and edate!=''">					and `order`.`create_date` <![CDATA[<=]]>					#{edate}				</if>				<if test="wid!=null and wid!=''">					and `order`.`warehouse_id`= #{wid}				</if>				<if test="cid!=null and cid!=''">					and `order`.`channel_id`= #{cid}				</if>				and ((`order`.`state`='0') or (`order`.`state`='1'))			</otherwise>		</choose>		</where>	</select>		<select id="searchcountOfWebOrderincludenopay" resultMap="basic_result_map">		select distinct `order`.* from `order`		left join `users` as u		on		u.id=`order`.user_id		left join `order_detail` as od on		od.order_id=`order`.order_id		left join `transhipment_bill` as tb on		tb.id=od.transhipment_id		<where>		<!-- 		 `order`.store_id is null		and		(`order`.`state`='0' or `order`.`state`='1')		 -->		<choose>			<when test="orderId!=null and orderId!=''">				`order`.order_id like #{orderId}			</when>			<otherwise>				<if test="key!=null and key!=''">					(u.real_name like #{key} or u.phone like #{key} or u.email like #{key} or u.nick_name like #{key})				</if>				<if test="sdate!=null and sdate!=''">					and `order`.`create_date` <![CDATA[>=]]>					#{sdate}				</if>				<if test="edate!=null and edate!=''">					and `order`.`create_date` <![CDATA[<=]]>					#{edate}				</if>				<if test="wid!=null and wid!=''">					and `order`.`warehouse_id`= #{wid}				</if>				<if test="cid!=null and cid!=''">					and `order`.`channel_id`= #{cid}				</if>				and ((`order`.`state`='0') or (`order`.`state`='1'))			</otherwise>		</choose>		</where>		order by `order`.create_date desc		limit		#{index},#{size}	</select>	<update id="modifyOrderStatebyflightno">		update `order`		set 		<if test="state!=null and state!=''">			`state`=#{state},		</if>		`modify_date`=#{date}		where `flight` =#{flight} and `order`.`state`<![CDATA[>=]]> '0'			</update>	<select id="searchordersbyflight" resultMap="basic_result_map">		select distinct `order`.* from `order`		where `flight` =#{flight} and `order`.`state`<![CDATA[>=]]> '0'	</select>	<update id="modifyOrderflightnobyflightno">		update `order`		set 		`flight`=#{newflight},			`modify_date`=#{date}		where `flight` =#{flight} and `order`.`state`<![CDATA[>=]]> '0'			</update>	<update id="modifyOrderflightnobyorderids">		update `order`		set 		<if test="state!=null and state!=''">			`state`=#{state},		</if>		`modify_date`=#{date},		`flight` =#{flight} 		where `order_id` in		<foreach collection="list" item="id" close=")" open="("			separator=",">			#{id}		</foreach>	</update>		<update id="modifyOrderflightnobyorderid">		update `order`		set 		<if test="state!=null and state!=''">			`state`=#{state},		</if>		`modify_date`=#{date},		`flight` =#{flight} 		where `order_id` =#{orderId}		<if test="storeId!=null and storeId!=''">			and `warehouse_id`=#{storeId}			</if>		</update>		<select id="searchbyflyno" resultMap="basic_result_map">		select  `order`.* from `order`		where `flight` =#{flight}			</select>	<select id="getOrderbyorderidandwid" resultMap="basic_result_map">		select  `order`.* from `order`		where `order_id` =#{orderId} and `warehouse_id`=#{wid}			</select>	<update id="updatePayPosition">		UPDATE `order` SET pay_to_china = #{payToChina}, pay_change_warehouse = #{payChangeWarehouse} WHERE id = #{id}	</update>	<update id="updateState">		UPDATE `order` SET state = #{state}, modify_date = #{modifyDate} WHERE id = #{id}	</update>		<select id="countByAfterState" resultType="java.lang.Integer">		SELECT COUNT(o.id) FROM `order` o LEFT JOIN users u ON u.id=o.user_id		WHERE state <![CDATA[>=]]>#{state}			<if test="userId!=null and userId!=''">				AND o.user_id=#{userId}			</if>  	</select>	<select id="findByAfterState" resultMap="basic_result_map">		SELECT o.* FROM `order` o 			LEFT JOIN users u ON u.id=o.user_id			LEFT JOIN order_detail od ON od.order_id=o.order_id			LEFT JOIN transhipment_bill t ON t.id=od.transhipment_id			LEFT JOIN storage_position_record r ON r.relate_id=o.id	 		LEFT JOIN storage_position p ON p.id=r.storage_position_id	 		LEFT JOIN `storage` s ON s.id=p.storage_id AND s.type='2' AND s.warehouse_id=o.warehouse_id AND s.type_relate_id=o.channel_id		WHERE o.state <![CDATA[>=]]>#{order.state}			<if test="order.userId!=null and order.userId!=''">				AND o.user_id=#{order.userId}			</if>		ORDER BY o.create_date DESC		LIMIT #{firstResult}, #{pageSize}	</select>		<update id="modifyComdityCostByOrderId">		update `order`		set `CommodityCost` = #{CommodityCost}		where `id`=#{id}	</update>			<update id="modifyOrderStateOfExcelbyadmin">				update		`order`		set		<if test="state!=null and state!=''">		 `state`=#{state},					</if>		<if			test="(thirdPNS!=null and thirdPNS!='') or (thirdNo!=null and thirdNo!='')">			`third_pns`=#{thirdPNS},			`third_no`=#{thirdNo},		</if>		<if test="flight!=null and flight!=''">			`flight`=#{flight},		</if>		`modify_date`=#{modifyDate}		<!--  `state_remark`=#{item.state_remark}-->		where `order_id` = #{orderId}			</update>	<update id="modifyOrderSeaNoOfExcelbyadmin">				update		`order`		set		`sea_no`=#{seaNo},`modify_date`=#{modifyDate}		where `order_id` = #{orderId}			</update>			<select id="getOrderbyseanoandwid" resultMap="basic_result_map">		select  `order`.* from `order`		where `sea_no` =#{seaNo} 		<if test="wid!=null and wid!=''">		 and `warehouse_id`=#{wid}				</if>					</select>	<update id="modifyOrderStateOfExcelbyseano">			update		`order`		set		<if test="state!=null and state!=''">		 `state`=#{state},					</if>		<if			test="(thirdPNS!=null and thirdPNS!='') or (thirdNo!=null and thirdNo!='')">			`third_pns`=#{thirdPNS},			`third_no`=#{thirdNo},		</if>		`modify_date`=#{modifyDate}		<!--  `state_remark`=#{item.state_remark}-->		where `sea_no` = #{seaNo}			</update>			<update id="modifyemptyOrder_new" parameterType="com.weiye.model.Order">		update `order`		set		`state`=#{state},		`weight`=#{weight},		`jwweight`=#{jwweight},		`tariff`=#{tariff},		`or`=#{or},		`other`=#{other},		`mail`=#{mail},		`modify_date`=#{modifyDate},		`remark`=#{remark},		`warehouse_id`=#{warehouseId},		`store_id`=#{storeId},		`parce_value`=#{parceValue},		`length`=#{length},		`width`=#{width},		`height`=#{height},		`consignee_name`=#{cName},		`consignee_province`=#{cProvince},		`consignee_city`=#{cCity},		`consignee_district`=#{cDistrict},		`consignee_street_address`=#{cStreetAddress},		`consignee_zip_code`=#{cZipCode},		`consignee_phone`=#{cPhone},		`total_money`=#{totalMoney},		`channel_id`=#{channelId},		`cardid`=#{cardid},		`weight_kg`=#{weightKg},		`tran_pro`=#{tranPro},				`commodity_third_list`=#{commodityThirdList},		`third_brands`=#{thirdBrands},		`import_remark`=#{importRemark},		`third_create_date`=#{thirdCreateDate},		`flight`=#{flight},		`box_no`=#{boxNo},		`pay_or_not`=#{payOrNot},		`card_or_not`=#{cardOrNot},		`base_money`=#{baseMoney},		`express_name`=#{expressName},		`CommodityCost`=#{CommodityCost},		`senduser_zipcode`=#{senduserZipcode},		`senduser_city`=#{senduserCity},		`senduser_state`=#{senduserState},		`senduserAddress`=#{senduserAddress},		 `user_id` = #{userId},		 `senduserphone` = #{senduserphone},			 `senduserName` = #{senduserName},		`cardurl`=#{cardurl},		`cardurlother`=#{cardurlother},		`cardurltogether`=#{cardurltogether}				where `order_id` =		#{orderId} or `id` = #{id}	</update>		<select id="countOfordersbyorderid" parameterType="java.lang.String"		resultType="java.lang.Integer">		select count(*) from `order` where `order_id` =#{orderId}	</select>		<select id="countOfordersbyorderidandwin" parameterType="java.lang.String"		resultType="java.lang.Integer">		select count(*) from `order` where `order_id` =#{orderId} and `warehouse_id`=#{wid}	</select>		<select id="getByOrderIdonlyorder" resultMap="basic_result_onlyorder_map">		select *		from `order` 		where `order_id`=#{orderId} 		<if test="storeId!=null and storeId!=''">			and `warehouse_id`=#{storeId}			</if>				limit 1	</select>			<select id="countOfflights" resultType="java.lang.Integer">		select count(distinct `order`.`order_id`) 		from `order`		where `flight`=#{flight} 	</select>		<select id="getByOrderIdonlyfororder" resultMap="basic_result_map_fororder">		select *		from `order` 		where `order_id`=#{orderId} 		<if test="storeId!=null and storeId!=''">			and `warehouse_id`=#{storeId}			</if>				limit 1	</select>		<select id="countOfSearchLike" resultType="java.lang.Integer">		select count(*) from `order` as oo			left join `users` as u on u.id= oo.user_id         	LEFT JOIN `order_detail` as d ON oo.order_id =d.order_id        	left join `commodity` as c on c.id= d.commodity_id		where oo.user_id = #{userId} 		and oo.order_id like #{query} or c.name like #{query}  or d.brands like #{query}          or oo.consignee_name like #{query} or oo.consignee_phone like #{query} or oo.consignee_street_address like #{query}          or oo.consignee_province like #{query} or oo.consignee_city like #{query} or oo.consignee_district like #{query}         <if test="type!=null and type!=''">		 and `type`=#{type},					 </if>	</select>	<select id="searchByLike" resultMap="basic_result_map">		select * from `order` as oo			left join `users` as u on u.id= oo.user_id         	LEFT JOIN `order_detail` as d ON oo.order_id =d.order_id        	left join `commodity` as c on c.id= d.commodity_id		where oo.user_id = #{userId} 		and oo.order_id like #{query} or c.name like #{query}  or d.brands like #{query}          or oo.consignee_name like #{query} or oo.consignee_phone like #{query} or oo.consignee_street_address like #{query}          or oo.consignee_province like #{query} or oo.consignee_city like #{query} or oo.consignee_district like #{query}         <if test="type!=null and type!=''">		 and `type`=#{type},					 </if>	</select></mapper>