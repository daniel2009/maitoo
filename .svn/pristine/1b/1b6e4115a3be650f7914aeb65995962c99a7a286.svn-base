package com.weiye.controller;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import jxl.common.Logger;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.weiye.common.constants.Constant;
import com.weiye.common.constants.ResponseCode;
import com.weiye.common.util.OrderUtil;
import com.weiye.common.util.StringUtil;
import com.weiye.model.Order;
import com.weiye.model.ResponseObject;
import com.weiye.service.OrderService;

/**
 * 散户快件管理
 * 
 * @author Administrator
 * 
 */
@Controller
public class RetailOrderController extends BasicController {

	private static final long serialVersionUID = -3391002852729509955L;
	private static final Logger log = Logger.getLogger(RetailOrderController.class);
	@Resource(name = "orderService")
	private OrderService orderService;
	@Value(value = "${orderid.output.templets}")
	private String orderIdOutputTempletsFile;
	@Value(value = "${orderid.import.templets}")
	private String orderIdImportTempletsFile;
	private static final int MAX_CREATE_SIZE = 1000;
	private static final int MAX_GET_SIZE = 500;

	@RequestMapping(value = "/admin/rlorder/create", method = { RequestMethod.POST })
	@ResponseBody
	public ResponseObject<List<Map<String, Object>>> createRetailOrders(
	        @RequestParam(value = "size") String sizeParameter) {
		int size = 0;
		try {
			size = Integer.valueOf(sizeParameter);
		} catch (Exception e) {
			return generateResponseObject(ResponseCode.PARAMETER_ERROR, "size参数必须是一个可表示的整数，您输入的是：" + sizeParameter);
		}

		if (size < 1 || size > MAX_CREATE_SIZE) {
			return generateResponseObject(ResponseCode.PARAMETER_ERROR, "size的大小必须在0到" + MAX_CREATE_SIZE
			        + "之间，不包括上下限制！");
		}

		try {
			// 开始创建
			return this.orderService.createRetailOrder(size);
		} catch (Exception e) {
			log.error("创建空运单失败，出现异常！", e);
			return generateResponseObject(ResponseCode.SHOW_EXCEPTION, "创建空运单出现异常");
		}
	}

	@RequestMapping(value = "/admin/rlorder/delete", method = { RequestMethod.POST })
	@ResponseBody
	public ResponseObject<Object> deleteOrderOfAdmin(@RequestParam(value = "oid") String[] orderIds) {
		try {
			return this.orderService.deleteRetailOrderByOrderIds(Arrays.asList(orderIds));
		} catch (Exception e) {
			log.error("删除订单失败", e);
			return generateResponseObject(ResponseCode.SHOW_EXCEPTION, "删除订单失败");
		}
	}

	@RequestMapping(value = "/admin/rlorder/get", method = { RequestMethod.GET })
	@ResponseBody
	public ResponseObject<List<Map<String, Object>>> getRetailOrders(
	        @RequestParam(value = "soid", required = false, defaultValue = "") String soid,
	        @RequestParam(value = "eoid", required = false, defaultValue = "") String eoid,
	        @RequestParam(value = "size", required = false, defaultValue = "100") String sizeParameter) {
		int size = 0;
		try {
			size = Integer.valueOf(sizeParameter);
		} catch (Exception e) {
			return generateResponseObject(ResponseCode.PARAMETER_ERROR, "size参数必须是一个可表示的整数，您输入的是：" + sizeParameter);
		}

		if (size < 1 || size > MAX_GET_SIZE) {
			return generateResponseObject(ResponseCode.PARAMETER_ERROR, "size的大小必须在0到" + MAX_GET_SIZE + "之间，不包括上下限制！");
		}

		try {
			return this.orderService.getRetailOrder(soid, eoid, size);
		} catch (Exception e) {
			log.error("获取空运单数据失败，出现异常！", e);
			return generateResponseObject(ResponseCode.SHOW_EXCEPTION, "获取空运单数据出现异常");
		}
	}

	@RequestMapping(value = "/admin/rlorder/getcount", method = { RequestMethod.GET })
	@ResponseBody
	public ResponseObject<Map<String, Object>> getRetailOrdersCount() {
		try {
			return this.orderService.getRetailOrderCount();
		} catch (Exception e) {
			log.error("获取空运单数量失败，出现异常！", e);
			return generateResponseObject(ResponseCode.SHOW_EXCEPTION, "获取空运单数量出现异常");
		}
	}

	@RequestMapping(value = "/admin/rlorder/export", method = { RequestMethod.POST })
	public void exportOrderDataToExcel(HttpServletRequest request, HttpServletResponse response,
	        @RequestParam(value = "type") String type,
	        @RequestParam(value = "size", required = false, defaultValue = "") String sizeParameter,
	        @RequestParam(value = "soid", required = false, defaultValue = "") String soid,
	        @RequestParam(value = "eoid", required = false, defaultValue = "") String eoid) throws Exception {
		String fileName = "散件运单号.xls";
		List<Map<String, Object>> list = null;
		String message = null;

		int size = 0;
		try {
			size = Integer.valueOf(sizeParameter);
			if (size < 1) {
				size = 1;
			}
		} catch (Exception e) {
			log.error("参数不是数字", e);
			message = "新建运单参数不是数字，无法产生运单号！";
		}

		if ("1".equals(type)) {
			// 产生新运单
			if (StringUtil.isEmpty(message)) {
				if (size > MAX_CREATE_SIZE) {
					size = MAX_CREATE_SIZE;
				}
				list = this.orderService.createRetailOrder(size).getData();
			}
		} else {
			// 获取旧运单
			if (StringUtil.isEmpty(message)) {
				if (size > MAX_GET_SIZE) {
					size = MAX_GET_SIZE;
				}
				list = this.orderService.getRetailOrder(soid, eoid, size).getData();
			}
		}

		// 写出数据
		response.setContentType("application/vnd.ms-excel");
		response.setHeader("Content-disposition", "attachment;filename="
		        + new String(fileName.getBytes(), "iso-8859-1"));
		File templeFile = new File(request.getSession().getServletContext().getRealPath("/")
		        + this.orderIdOutputTempletsFile);
		OutputStream os=null;
		try{
			os = response.getOutputStream();
			// 导出数据
			OrderUtil.exportEmptyOrderToExcel(list, templeFile, os, message);
		}catch (Exception e) {
			
		}
		finally {
		if (os != null) {
			try {
				os.close();
			} catch (IOException e) {
				// ignore
			}
		}
	}
	}

	@RequestMapping(value = "/admin/rlorder/import", method = { RequestMethod.POST })
	@ResponseBody
	public ResponseObject<Object> importOrderDataFromExcel(HttpServletRequest request, MultipartFile file)
	        throws Exception {
		if (file != null && file.getSize() > 0) {
			List<Order> orders = null;
			try {
				orders = OrderUtil.readEmptyOrderExcel(file.getInputStream());
			} catch (RuntimeException e) {
				log.error("出现runtimeException异常", e);
				return generateResponseObject(ResponseCode.SHOW_EXCEPTION, e.getMessage());
			} catch (OutOfMemoryError e) {
				log.error("内存不够", e);
				return generateResponseObject(ResponseCode.SHOW_EXCEPTION, "内存不够");
			} catch (Exception e) {
				log.error("读取数据出错", e);
				return generateResponseObject(ResponseCode.SHOW_EXCEPTION, "读取数据出错，错误信息：" + e.getMessage());
			}

			try {
				String storeId = StringUtil.obj2String(request.getSession().getAttribute(Constant.EMP_STORE_ID_SESSION_KEY));
				String empName = StringUtil.obj2String(request.getSession().getAttribute(Constant.EMP_ACCOUNT_SESSION_KEY));
				return this.orderService.importRetailOrder(orders, empName,storeId);
			} catch (Exception e) {
				log.error("插入空运单失败，空运单格式不对！", e);
				return generateResponseObject(ResponseCode.SHOW_EXCEPTION, "异常信息：" + e.getMessage());
			}
		}
		return generateResponseObject(ResponseCode.PARAMETER_ERROR, "插入文件不能为空");
	}

	@RequestMapping(value = "/admin/rlorder/download", method = { RequestMethod.GET })
	public void getImportOrderDataExcelFile(HttpServletRequest request, HttpServletResponse response) throws Exception {
		InputStream input = null;
		ServletOutputStream os=null;
		try {
			response.setContentType("application/vnd.ms-excel");
			response.setHeader("Content-disposition", "attachment;filename="
			        + new String("散件运单导入模板.xls".getBytes(), "iso-8859-1"));
			input = request.getSession().getServletContext().getResourceAsStream(this.orderIdImportTempletsFile);
			os = response.getOutputStream();
			byte[] buffer = new byte[1024];
			int n = 0;
			while ((n = input.read(buffer)) > 0) {
				os.write(buffer, 0, n);
			}
			os.flush();
		} catch (Exception e) {
			log.error("下载文件失败", e);
		} finally {
			if (input != null) {
				try {
					input.close();
				} catch (IOException e) {
					// ignore
				}
			}
			if (os != null) {
				try {
					os.close();
				} catch (IOException e) {
					// ignore
				}
			}
		}
	}

}
