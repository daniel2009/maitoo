<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"><mapper namespace="com.weiye.dao.StorageDao">	<resultMap id="basic_result_map" type="com.weiye.model.Storage">		<id column="id" property="id" javaType="String" />		<result column="name" property="name" javaType="String"/>		<result column="warehouse_id" property="warehouseId" javaType="String"/>		<result column="type" property="type" javaType="String"/>		<result column="type_relate_id" property="typeRelateId" javaType="String"/>		<result column="max_column" property="maxColumn" javaType="String"/>		<result column="max_row" property="maxRow" javaType="String"/>		<result column="total_available" property="totalAvailable" javaType="String"/>		<result column="warehouse_name" property="warehouseName" javaType="String"/>		<result column="type_relate_name" property="typeRelateName" javaType="String"/>		<collection property="positionList" javaType="list" ofType="com.weiye.model.StoragePosition">			<id property="id" column="storage_position_id"/>			<result property="available" column="storage_position_available"/>		</collection>	</resultMap>		<insert id="insert" useGeneratedKeys="true" keyProperty="id">		INSERT INTO storage(name, warehouse_id, type, type_relate_id) 		SELECT #{name}, #{warehouseId}, #{type}, #{typeRelateId} FROM DUAL WHERE NOT EXISTS (SELECT id FROM storage WHERE name=#{name})	</insert>	<select id="findById" resultMap="basic_result_map">		SELECT * FROM storage WHERE id=#{id}	</select>	<select id="countByWarehouseId" resultType="java.lang.Integer">		SELECT COUNT(id) FROM storage WHERE warehouse_id = #{warehouseId}	</select>	<select id="findByWarehouseId" resultMap="basic_result_map">		SELECT 			s.*, 			(SELECT MAX(col_number) FROM storage_position p WHERE p.storage_id=s.id) AS max_column,			(SELECT MAX(row_number) FROM storage_position p WHERE p.storage_id=s.id) AS max_row,			(SELECT COUNT(available) FROM storage_position p WHERE p.storage_id=s.id AND available = '1') AS total_available, 			p.id AS storage_position_id,			p.available AS storage_position_available,			w.name AS warehouse_name,			CASE(s.type)				WHEN 0 THEN (SELECT w.name FROM warehouse w WHERE w.id=s.type_relate_id)				WHEN 1 THEN 'æ— '				WHEN 2 THEN (SELECT c.name FROM channels c WHERE c.id=s.type_relate_id)			END AS type_relate_name		FROM storage s RIGHT JOIN storage_position p ON p.storage_id=s.id LEFT JOIN warehouse w ON s.warehouse_id=w.id WHERE s.warehouse_id = #{warehouseId} AND s.type = #{type}	</select>	<delete id="delete">		DELETE FROM storage WHERE id = #{id}	</delete>	<select id="countByWarehouseIdAndTypeAndRelateId" resultType="java.lang.Integer">		SELECT COUNT(id) FROM storage s WHERE warehouse_id=#{warehouseId} AND s.type=#{type}		<if test='type!="1"'>AND s.type_relate_id=#{typeRelateId} </if> 		ORDER BY s.id DESC	</select>	<select id="findByWarehouseIdAndTypeAndRelateId" resultMap="basic_result_map">		SELECT 			s.*, 			(SELECT MAX(col_number) FROM storage_position p WHERE p.storage_id=s.id) AS max_column,			(SELECT COUNT(available) FROM storage_position p WHERE p.storage_id=s.id AND available = '1') AS total_available, 			p.id AS storage_position_id,			p.available AS storage_position_available,			w.name AS warehouse_name 		FROM storage s RIGHT JOIN storage_position p ON p.storage_id=s.id LEFT JOIN warehouse w ON s.warehouse_id=w.id WHERE s.warehouse_id = #{warehouseId} AND s.type=#{type} AND s.type_relate_id=#{typeRelateId}		ORDER BY s.id DESC	</select>	<select id="findByWarehouseIdAndTypeAndRelateIdList" resultMap="basic_result_map">		SELECT 			s.*			FROM storage s WHERE s.warehouse_id = #{warehouseId} AND s.type=#{type} AND s.type_relate_id=#{typeRelateId}		ORDER BY s.id 	</select></mapper>