package com.weiye.controller;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import jxl.common.Logger;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.weiye.common.constants.Constant;
import com.weiye.common.constants.ResponseCode;
import com.weiye.common.util.StringUtil;
import com.weiye.common.util.UploadUtil;
import com.weiye.exception.ServiceException;
import com.weiye.model.Cart;
import com.weiye.model.PageSplit;
import com.weiye.model.Product;
import com.weiye.model.ProductRecord;
import com.weiye.model.ResponseObject;
import com.weiye.service.GlobalArgsService;
import com.weiye.service.ProductRecordService;
import com.weiye.service.ProductService;

@Controller
public class ProductRecordController extends BasicController {
	/**
	 * 
	 */
	private static final long serialVersionUID = -4544907817740050996L;
	private static final Logger log = Logger.getLogger(ProductRecordController.class);
	@Resource(name = "productRecordService")
	private ProductRecordService productRecordService;
	@Resource(name = "productService")
	private ProductService productService;
	@Resource(name = "globalargsService")
	private GlobalArgsService globalArgsService;
	@Value(value = "${page_size}")
	private int defaultPageSize;
	private static final String IMG_PACKAGE = "/resources/pics/card";
	@Value(value = "${default_img_type}")
	private String defaultImgType;
	@Value(value = "${default_img_size}")
	private int defaultImgSize;
	
	private <T> ResponseObject<T> catchException(Exception e, String message){
		log.error(message, e);
		return generateResponseObject(ResponseCode.SHOW_EXCEPTION, message);
	}
	private boolean needIdCard(){
		boolean needIdCard = false;
		try {
			ResponseObject<String> responseObject = globalArgsService.getByFlag("use_idcard");
			if(ResponseCode.SUCCESS_CODE.equals(responseObject.getCode()) && "1".equals(responseObject.getData())){
				needIdCard = true;
			}
		} catch (ServiceException e) {
			e.printStackTrace();
		}
		return needIdCard;
	}
	@RequestMapping(value = "/admin/productRecord/findAll", method = RequestMethod.POST)
	@ResponseBody
	public ResponseObject<PageSplit<ProductRecord>> findAll(HttpServletRequest request, ProductRecord productRecord,
			@RequestParam(value = "dateStart", required = false) String dateStart,
			@RequestParam(value = "dateEnd", required = false) String dateEnd,
			@RequestParam(value = "pageIndex", required = false, defaultValue="1")int pageIndex){
		try{
			return productRecordService.findByKey(productRecord, dateStart, dateEnd, pageIndex, defaultPageSize);
		}catch(Exception e){
			return this.catchException(e, "获取商品购买记录异常");
		}
	}
	@RequestMapping(value = {"/admin/productRecord/findById", "/user/productRecord/findById"}, method = RequestMethod.POST)
	@ResponseBody
	public ResponseObject<ProductRecord> findById(HttpServletRequest request, ProductRecord productRecord){
		try{
			return productRecordService.findById(productRecord);
		}catch(Exception e){
			return this.catchException(e, "获取商品购买记录异常");
		}
	}
	@RequestMapping(value = "/user/productRecord/findByUser", method = RequestMethod.POST)
	@ResponseBody
	public ResponseObject<PageSplit<ProductRecord>> findByUser(HttpServletRequest request, ProductRecord productRecord,
			@RequestParam(value = "nameCondition", required = false, defaultValue = "") String nameCondition,
			@RequestParam(value = "state", required = false) String state,
			@RequestParam(value = "dateStart", required = false) String dateStart,
			@RequestParam(value = "dateEnd", required = false) String dateEnd,
			@RequestParam(value = "pageIndex", required = false, defaultValue="1")int pageIndex){
		String userId = StringUtil.obj2String(request.getSession().getAttribute(Constant.USER_ID_SESSION_KEY));
		productRecord.setUserId(userId);
		productRecord.setRemark(nameCondition);
		try{
			return productRecordService.findByKey(productRecord, dateStart, dateEnd, pageIndex, defaultPageSize);
		}catch(Exception e){
			return this.catchException(e, "获取商品购买记录列表异常");
		}
	}
	@RequestMapping(value = "/user/productRecord/addByUser", method = RequestMethod.POST)
	@ResponseBody
	public ResponseObject<Object> addByUser(HttpServletRequest request, ProductRecord productRecord,
			@RequestParam(value = "cartId", required = false) String cartId,
			@RequestParam(value = "idCardPicture", required = false) MultipartFile idCardPicture,
			@RequestParam(value = "idCardOtherPicture", required = false) MultipartFile idCardOtherPicture){
		boolean hasPic = UploadUtil.isFileUrl(productRecord.getcIdCardPic()) || UploadUtil.hasFile(idCardPicture);
		if(this.needIdCard() && !hasPic){
			return generateResponseObject(ResponseCode.SHOW_EXCEPTION, "需要上传身份证");
		}
		String realPath = request.getSession().getServletContext().getRealPath("/");
		String[] fileNames = UploadUtil.uploadFile(IMG_PACKAGE, realPath, defaultImgSize, defaultImgType, false, 0, idCardPicture, idCardOtherPicture);
		if(fileNames[0].indexOf(".") < 0){
			return generateResponseObject(ResponseCode.UPLOAD_IMG_ERROR, fileNames[0]);
		}else{
			if(fileNames[0].indexOf(".") > 0){
				productRecord.setcIdCardPic(fileNames[0]);
			}
			if(fileNames[1].indexOf(".") > 0){
				productRecord.setcIdCardOtherPic(fileNames[1]);
			}
		}
		String userId = StringUtil.obj2String(request.getSession().getAttribute(Constant.USER_ID_SESSION_KEY));
		productRecord.setUserId(userId);
		Cart cart = new Cart();
		cart.setId(cartId);
		cart.setQuantity(productRecord.getQuantity());
		cart.setUserId(userId);
		try{
			return productService.purchase(cart, productRecord);
		}catch(ServiceException e){
			String message = e.getLocalizedMessage().replace("com.weiye.exception.ServiceException:", "");
			return this.catchException(e, message);
		}catch(Exception e){
			return this.catchException(e, "对商品下单异常");
		}
	}
	@RequestMapping(value = "/user/productRecord/delete", method = RequestMethod.POST)
	@ResponseBody
	public ResponseObject<Object> delete(HttpServletRequest request, ProductRecord productRecord){
		try{
			return productRecordService.delete(productRecord);
		}catch(Exception e){
			return this.catchException(e, "对商品下单异常");
		}
	}
	@RequestMapping(value = {"/productRecord/findByProductIdAndWithComment", "/user/productRecord/findByProductIdAndWithComment"}, method = RequestMethod.POST)
	@ResponseBody
	public ResponseObject<PageSplit<ProductRecord>> findByProductIdAndWithComment(HttpServletRequest request, ProductRecord productRecord,
			@RequestParam(value = "dateStart", required = false) String dateStart,
			@RequestParam(value = "dateEnd", required = false) String dateEnd,
			@RequestParam(value = "pageIndex", required = false, defaultValue="1")int pageIndex){
		String userId = StringUtil.obj2String(request.getSession().getAttribute(Constant.USER_ID_SESSION_KEY));
		try{
			return productRecordService.findByKeyAndWithComment(productRecord, dateStart, dateEnd, pageIndex, defaultPageSize);
		}catch(Exception e){
			return this.catchException(e, "获取商品购买记录列表异常");
		}
	}
	@RequestMapping(value = "/user/productRecord/updateByUser", method = RequestMethod.POST)
	@ResponseBody
	public ResponseObject<Object> updateByUser(HttpServletRequest request, ProductRecord productRecord,
			@RequestParam(value = "idCardPicture", required = false) MultipartFile idCardPicture,
			@RequestParam(value = "idCardOtherPicture", required = false) MultipartFile idCardOtherPicture){
		boolean hasPic = UploadUtil.isFileUrl(productRecord.getcIdCardPic()) || UploadUtil.hasFile(idCardPicture);
		if(this.needIdCard() && !hasPic){
			return generateResponseObject(ResponseCode.SHOW_EXCEPTION, "需要上传身份证");
		}
		String realPath = request.getSession().getServletContext().getRealPath("/");
		String[] fileNames = UploadUtil.uploadFile(IMG_PACKAGE, realPath, defaultImgSize, defaultImgType, false, 0, idCardPicture, idCardOtherPicture);
		if(fileNames[0].indexOf(".") < 0){
			return generateResponseObject(ResponseCode.UPLOAD_IMG_ERROR, fileNames[0]);
		}else{
			if(fileNames[0].indexOf(".") > 0){
				productRecord.setcIdCardPic(fileNames[0]);
			}
			if(fileNames[1].indexOf(".") > 0){
				productRecord.setcIdCardOtherPic(fileNames[1]);
			}
		}
		productRecord.setUserId((String) request.getSession().getAttribute(Constant.USER_ID_SESSION_KEY));
		try{
			return productRecordService.updateByUser(productRecord);
		}catch(ServiceException e){
			String message = e.getMessage().replace("com.weiye.exception.ServiceException:", "");
			return this.catchException(e, message);
		}catch(Exception e){
			return this.catchException(e, "获取商品购买记录列表异常");
		}
	}
	@RequestMapping(value = "/user/productRecord/updateComment", method = RequestMethod.POST)
	@ResponseBody
	public ResponseObject<Object> updateComment(HttpServletRequest request, ProductRecord productRecord){
		try{
			return productRecordService.updateComment(productRecord);
		}catch(Exception e){
			return this.catchException(e, "获取商品购买记录列表异常");
		}
	}
	@RequestMapping(value = "/admin/productRecord/getAllStateCount", method = RequestMethod.GET)
	@ResponseBody
	public ResponseObject<String[]> getAllStateCount(HttpServletRequest request){
		try{
			return this.productRecordService.getAllStateCount();
		}catch(Exception e){
			return this.catchException(e, "根据用户获取事件数量出现异常");
		}
	}
	@RequestMapping(value = "/productRecord/getPurchaseCountByProduct", method = RequestMethod.GET)
	@ResponseBody
	public ResponseObject<Integer> getPurchaseCountByProduct(HttpServletRequest request, Product product){
		try{
			return this.productRecordService.countPurchase(product);
		}catch(Exception e){
			return this.catchException(e, "计算购买量异常");
		}
	}
}
