<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"><mapper namespace="com.weiye.dao.ProductDao">	<resultMap id="basic_result_map" type="com.weiye.model.Product">		<id column="id" property="id" javaType="String" />		<result column="url" property="url" javaType="String"/>		<result column="name" property="name" javaType="String"/>		<result column="description" property="description" javaType="String"/>		<result column="price" property="price" javaType="String"/>		<result column="currency" property="currency" javaType="String"/>		<result column="quantity" property="quantity" javaType="String"/>		<result column="pic1" property="pic1" javaType="String"/>		<result column="pic2" property="pic2" javaType="String"/>		<result column="pic3" property="pic3" javaType="String"/>		<result column="emp_id" property="empId" javaType="String"/>		<result column="type_id" property="typeId" javaType="String"/>		<result column="create_date" property="createDate" javaType="String"/>		<result column="modify_date" property="modifyDate" javaType="String"/>		<result column="expire_date" property="expireDate" javaType="String"/>		<result column="type_name" property="typeName" javaType="String"/>		<result column="comment_num" property="commentNum" javaType="String"/>	</resultMap>		<insert id="insert" keyProperty="id" useGeneratedKeys="true">		INSERT INTO product(url, name, description, price, currency, quantity, pic1, pic2, pic3, emp_id, user_id, type_id, create_date, modify_date, expire_date)			VALUES(#{url}, #{name}, #{description}, #{price}, #{currency}, #{quantity}, #{pic1}, #{pic2}, #{pic3}, #{empId}, #{userId}, #{typeId}, #{createDate}, #{modifyDate}, #{expireDate})	</insert>	<update id="update">		UPDATE product SET url=#{url}, name=#{name}, description=#{description}, price=#{price}, currency=#{currency}, quantity=#{quantity}, pic1=#{pic1}, pic2=#{pic2}, pic3=#{pic3}, type_id=#{typeId}, modify_date=#{modifyDate}, expire_date=#{expireDate} WHERE id=#{id}	</update>	<delete id="delete">		DELETE FROM product WHERE id=#{id}	</delete>		<select id="findById" resultMap="basic_result_map">		SELECT *, t.name AS type_name, 			 (SELECT COUNT(r.id) FROM product_record r WHERE r.product_id=p.id AND r.comment IS NOT NULL) AS comment_num 		FROM product p LEFT JOIN product_type t ON t.id=p.type_id WHERE p.id=#{id}	</select>		<select id="countByKey" resultType="java.lang.Integer">		SELECT COUNT(p.id) FROM product p		<trim prefix="WHERE" prefixOverrides="AND|OR">			<if test="product.name!=null and product.name!=''"> 				AND p.name LIKE #{product.name}			</if>			<if test="product.typeId!=null and product.typeId!=''"> 				AND p.type_id = #{product.typeId}			</if>			<if test="priceStart!=null and priceStart!=''">				AND p.price <![CDATA[>=]]> #{priceStart}			</if>			<if test="priceEnd!=null and priceEnd!=''">				AND p.price <![CDATA[<=]]> #{priceEnd}			</if>			<if test="userId!=null and userId!=''"> 				AND EXISTS (SELECT r.id FROM product_record r WHERE r.product_id=p.id AND r.user_id=#{userId})			</if>		</trim> 	</select>	<select id="findByKey" resultMap="basic_result_map">		SELECT p.*, t.name AS type_name FROM product p			LEFT JOIN product_type t ON t.id= p.type_id 		<trim prefix="WHERE" prefixOverrides="AND|OR">			<if test="product.name!=null and product.name!=''"> 				AND p.name LIKE #{product.name}			</if>			<if test="product.typeId!=null and product.typeId!=''"> 				AND p.type_id = #{product.typeId}			</if>			<if test="priceStart!=null and priceStart!=''">				AND p.price <![CDATA[>=]]> #{priceStart}			</if>			<if test="priceEnd!=null and priceEnd!=''">				AND p.price <![CDATA[<=]]> #{priceEnd}			</if>			<if test="userId!=null and userId!=''"> 				AND EXISTS (SELECT r.id FROM product_record r WHERE r.product_id=p.id AND r.user_id=#{userId})			</if>		</trim>		ORDER BY p.modify_date DESC		LIMIT #{firstResult}, #{pageSize}	</select>		<select id="countByKeyAndUser" resultType="java.lang.Integer">		SELECT COUNT(p.id) FROM product p		<trim prefix="WHERE" prefixOverrides="AND|OR">			<if test="product.name!=null and product.name!=''"> 				AND p.name LIKE #{product.name}			</if>			<if test="product.typeId!=null and product.typeId!=''"> 				AND p.type_id = #{product.typeId}			</if>			<if test="priceStart!=null and priceStart!=''">				AND p.price <![CDATA[>=]]> #{priceStart}			</if>			<if test="priceEnd!=null and priceEnd!=''">				AND p.price <![CDATA[<=]]> #{priceEnd}			</if>			<if test="product.userId==null or product.userId==''"> 				AND p.user_id IS NULL			</if>			<if test="product.userId!=null and product.userId!=''"> 				AND (p.user_id = #{product.userId} OR p.user_id IS NULL)			</if>		</trim> 	</select>	<select id="findByKeyAndUser" resultMap="basic_result_map">		SELECT p.*, t.name AS type_name, 			(SELECT COUNT(r.id) FROM product_record r WHERE r.product_id=p.id AND r.comment IS NOT NULL) AS comment_num 		FROM product p			LEFT JOIN product_type t ON t.id= p.type_id 		<trim prefix="WHERE" prefixOverrides="AND|OR">			<if test="product.name!=null and product.name!=''"> 				AND p.name LIKE #{product.name}			</if>			<if test="product.typeId!=null and product.typeId!=''"> 				AND p.type_id = #{product.typeId}			</if>			<if test="priceStart!=null and priceStart!=''">				AND p.price <![CDATA[>=]]> #{priceStart}			</if>			<if test="priceEnd!=null and priceEnd!=''">				AND p.price <![CDATA[<=]]> #{priceEnd}			</if>			<if test="product.userId==null or product.userId==''"> 				AND p.user_id IS NULL			</if>			<if test="product.userId!=null and product.userId!=''"> 				AND (p.user_id = #{product.userId} OR p.user_id IS NULL)			</if>		</trim>		ORDER BY p.modify_date DESC		LIMIT #{firstResult}, #{pageSize}	</select>		<select id="findByIds" resultMap="basic_result_map">		SELECT p.*, t.name AS type_name,			(SELECT COUNT(r.id) FROM product_record r WHERE r.product_id=p.id AND r.comment IS NOT NULL) AS comment_num 		FROM product p			LEFT JOIN product_type t ON t.id= p.type_id 		WHERE p.id IN 		<foreach collection="ids" item="id" open="(" close=")" separator=",">			#{id}		</foreach>		LIMIT #{firstResult}, #{pageSize}	</select>	<select id="findByIdsIncludeSame" resultMap="basic_result_map">		<trim prefix="" prefixOverrides="UNION ALL">			<foreach collection="ids" item="id">				UNION ALL SELECT p.*, t.name AS type_name,					(SELECT COUNT(r.id) FROM product_record r WHERE r.product_id=p.id AND r.comment IS NOT NULL) AS comment_num				FROM product p					LEFT JOIN product_type t ON t.id= p.type_id 				WHERE p.id = #{id}			</foreach>		</trim>		LIMIT #{firstResult}, #{pageSize}	</select>	<update id="updateQuantity">		UPDATE product SET quantity=#{quantity}, modify_date=#{modifyDate} WHERE id=#{id}	</update></mapper>