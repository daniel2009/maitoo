<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"><mapper namespace="com.meitao.dao.UserDao">	<resultMap id="basic_result_map" type="com.meitao.model.User">		<id column="id" property="id" javaType="String" />		<result column="email" property="email" javaType="String" />		<result column="password" property="password" javaType="String" />		<result column="nick_name" property="nickName" javaType="String" />		<result column="real_name" property="realName" javaType="String" />		<result column="phone" property="phone" javaType="String" />		<result column="qq" property="qq" javaType="String" />		<result column="recommender" property="recommender" javaType="String" />		<result column="country" property="country" javaType="String" />		<result column="address" property="address" javaType="String" />		<result column="sign_date" property="signDate" javaType="String" />		<result column="type" property="type" javaType="String" />		<result column="status" property="status" javaType="String" />		<result column="emp_account" property="empaccount" javaType="String" />		<result column="rmb_balance" property="rmbBalance" javaType="String" />		<result column="usd_balance" property="usdBalance" javaType="String" />		<result column="usercode" property="usercode" javaType="String" />		<result column="useralias" property="useralias" javaType="String" />		<result column="groupid" property="groupId" javaType="String" />		<result column="phone_state" property="phoneState" javaType="String" />		<result column="email_state" property="emailState" javaType="String" />		<result column="reg_type" property="regType" javaType="String" />		<result column="modify_date" property="modifyDate" javaType="String" />		<result column="create_date" property="createDate" javaType="String" />				<association property="freezeMoney" column="id"			select="com.meitao.dao.FreezeMoneyDao.getbyuserId"></association>	</resultMap>	<select id="getUserById" parameterType="java.lang.String"		resultMap="basic_result_map">		select users.*,a.rmb as rmb_balance, a.usd as usd_balance		from users left join `account` as a on users.id=a.user_id		where users.id=#{id}	</select>	<select id="getUserByOrderId" parameterType="java.lang.String"		resultMap="basic_result_map">		select users.*,a.rmb as rmb_balance, a.usd as usd_balance		from users left join `account` as a on users.id=a.user_id		left join `order` as o on o.user_id = users.id		where			<choose>				<when test="id!=null and id!=''">					o.id=#{id}				</when>				<when test="orderId!=null and orderId!=''">					o.order_id=#{orderId}				</when>				<otherwise>					0=1				</otherwise>			</choose>		limit 1;	</select>	<select id="getUserByAccount" parameterType="java.lang.String"		resultMap="basic_result_map">		select users.*		from users		where (users.phone = #{account} and users.phone_state='1') or (users.email = #{account} and users.email_state='1') or (users.phone = #{account} and users.reg_type='0') or (users.email = #{account} and users.reg_type='1')		limit 1	</select>	<select id="getUserByPhone" parameterType="java.lang.String"		resultMap="basic_result_map">		select users.*		from users		<!--  where (users.phone = #{phone} and users.phone_state='1') or (users.phone = #{phone} and users.reg_type='0')-->		where users.phone = #{phone}		limit 1	</select>		<select id="getUserByPhonecheck" parameterType="java.lang.String" 		resultMap="basic_result_map">		select users.*		from users		where users.phone = #{phone}			</select>		<select id="getUserByEmailAccount" parameterType="java.lang.String"		resultMap="basic_result_map">		select users.*		from users		<!-- where (users.email = #{email} and users.email_state='1') or (users.email = #{email} and users.reg_type='1')-->		where users.email = #{email} 		limit 1	</select>		<select id="getUserByUserCodeOrUserAlias" parameterType="java.lang.String"		resultMap="basic_result_map">		select users.*		from users		where users.usercode = #{usercode} or users.useralias = #{useralias}		limit 1	</select>			<select id="searchUserByKey" resultMap="basic_result_map">		select distinct users.*,a.rmb as rmb_balance, a.usd as usd_balance		from users left join `account` as a on users.id=a.user_id		<where>			<if test="userId!=null and userId!=''">				id = #{userId} 			</if>			<choose>				<when test="column!=null and column!=''">					and (${column} like #{key})				</when>				<otherwise>					and (					users.email like #{key} or users.nick_name like #{key}					or					users.real_name like #{key} or users.phone like #{key}					or users.qq					like #{key} or type like #{key}											)				</otherwise>			</choose>		</where>		order by users.sign_date desc,users.id		limit		#{index},#{size}	</select><select id="searchUserByKey100" resultMap="basic_result_map">		select distinct users.*,a.rmb as rmb_balance, a.usd as usd_balance		from users left join `account` as a on users.id=a.user_id,consignee_info		<where>			<if test="userId!=null and userId!=''">				id = #{userId} 			</if>			<choose>				<when test="column!=null and column!=''">					and (${column} like #{key})					and groupid=#{groupId}				</when>				<otherwise>					and (					users.email like #{key} or users.nick_name like #{key}					or					users.real_name like #{key} or users.phone like #{key}					or users.qq					like #{key} or type like #{key}						or (consignee_info.phone like #{key} and consignee_info.user_id = users.id)					)				</otherwise>			</choose>		</where>		order by users.sign_date desc,users.id		limit		#{index},#{size}	</select>	<select id="countByKey100" resultType="java.lang.Integer">		select count(*) from users,consignee_info		<where>			<if test="userId!=null and userId!=''">				id = #{userId}			</if>			<choose>				<when test="column!=null and column!=''">					and (${column} like #{key})				</when>				<otherwise>					and (					users.email like #{key} or users.nick_name like #{key}					or					users.real_name like #{key} or users.phone like #{key}					or users.qq					like #{key} or type like #{key}						or (consignee_info.phone like #{key} and consignee_info.user_id = users.id)					)				</otherwise>			</choose>		</where>	</select>		<select id="countByKey" resultType="java.lang.Integer">		select count(*) from users left join `account` as a on users.id=a.user_id		<where>			<if test="userId!=null and userId!=''">				id = #{userId}			</if>			<choose>				<when test="column!=null and column!=''">					and (${column} like #{key})				</when>				<otherwise>					and (					users.email like #{key} or users.nick_name like #{key}					or					users.real_name like #{key} or users.phone like #{key}					or users.qq					like #{key} or type like #{key}		 					)				</otherwise>			</choose>		</where>	</select>		<select id="checkexistsforphone" resultMap="basic_result_map">		select users.* from users where users.phone = #{phone}	</select>		<select id="checkexistsforemail" resultMap="basic_result_map">		select users.* from users where users.email = #{email}	</select>		<select id="getExportUsersBySignDate" resultMap="basic_result_map">		select users.*,a.rmb as rmb_balance, a.usd as usd_balance		from users left join `account` as a on users.id=a.user_id		where sign_date <![CDATA[>=]]>#{sdate}		and sign_date<![CDATA[<=]]>#{edate}		and groupid=#{groupId}		<if test="type!=null and type!=''">			and type = #{type}		</if>	</select>	<select id="getExportAllUsersBySignDate" resultMap="basic_result_map">		select users.*,a.rmb as rmb_balance, a.usd as usd_balance		from users left join `account` as a on users.id=a.user_id		where sign_date <![CDATA[>=]]>#{sdate}		and sign_date<![CDATA[<=]]>#{edate}		<if test="type!=null and type!=''">			and type = #{type}		</if>	</select>	<insert id="insertUser" parameterType="com.meitao.model.User"		useGeneratedKeys="true" keyProperty="id">		insert into		users(email,password,nick_name,real_name,phone,qq,recommender,country,address,sign_date,type,status,emp_account,usercode,useralias,groupid,phone_state,email_state,reg_type,modify_date,create_date)		values(#{email},#{password},#{nickName},#{realName},#{phone},#{qq},#{recommender},#{country},#{address},#{signDate},#{type},'0',#{empaccount},#{usercode},#{useralias},#{groupId},#{phoneState},#{emailState},#{regType},#{modifyDate},#{createDate})	</insert>	<update id="updateUserById" parameterType="com.meitao.model.User">		update users		set		nick_name=#{nickName,jdbcType=VARCHAR} ,		real_name=#{realName,jdbcType=VARCHAR} ,		qq=#{qq,jdbcType=VARCHAR},		country=#{country,jdbcType=VARCHAR},		address=#{address,jdbcType=VARCHAR}		<if test="type!=null and type!=''">			,type=#{type}		</if>		<if test="phone!=null and phone!=''">			,phone=#{phone}		</if>		<if test="email!=null and email!=''">			,email=#{email}		</if>		where id=#{id}	</update>	<!-- 保存以上的修改方式 -->		<update id="updateUserById100" parameterType="com.meitao.model.User">		update users		set		real_name=#{realName,jdbcType=VARCHAR} ,		email=#{email,jdbcType=VARCHAR},		qq=#{qq,jdbcType=VARCHAR},		country=#{country,jdbcType=VARCHAR},		address=#{address,jdbcType=VARCHAR}		<if test="type!=null and type!=''">			,type=#{type}		</if>		where id=#{id}	</update>	<update id="updatePassword">		<choose>			<when test="id == null || id==''">				update users				set password = #{password}				where phone=#{phone}				<if test="oldpwd!=null and oldpwd!=''">					and password=#{oldpwd}				</if>			</when>			<otherwise>				update users				set password = #{password}				where id=#{id}			</otherwise>		</choose>	</update>		<update id="updatePasswordbyuser">				update users		set password = #{password}		where id=#{id} 		<if test="oldpwd!=null and oldpwd!=''">			and password=#{oldpwd}		</if>				</update>		<update id="updatePasswordByEmail">		<choose>			<when test="id == null || id==''">				update users				set password = #{password}				where email=#{email}				<if test="oldpwd!=null and oldpwd!=''">					and password=#{oldpwd}				</if>			</when>			<otherwise>				update users				set password = #{password}				where id=#{id}			</otherwise>		</choose>	</update>	<delete id="deleteUserByIds">		delete from users		where id in		<trim prefix="(" suffix=")">			<foreach collection="list" item="id" separator=",">				#{id}			</foreach>		</trim>	</delete>		<update id="updatephoneById" parameterType="com.meitao.model.User">		update users		set		phone=#{phone},		phone_state=#{phoneState},		modify_date=#{modifyDate}		where id=#{id}	</update>	<update id="updateEmailById" parameterType="com.meitao.model.User">		update users		set		email=#{email},		email_state=#{emailState},		modify_date=#{modifyDate}		where id=#{id}	</update>			<!-- 目的是减少查询时间 -->	<select id="countOfuserbyphone" parameterType="java.lang.String"		resultType="java.lang.Integer">		select count(*) from users where users.phone = #{phone}	</select>		<select id="getuseridbyphone" parameterType="java.lang.String"		resultType="java.lang.String">		select users.id from users where users.phone = #{phone}	</select>			<select id="countByInfo" resultType="java.lang.Integer">		select count(*) from users left join `account` as a on users.id=a.user_id		<where>			<if test="info!=null and info!=''">				(email like #{info} or real_name like #{info} or nick_name like #{info} or phone like #{info} or qq like #{info} or usercode like #{info} or useralias like #{info})			</if>			<if test="id!=null and id!=''">							or id= #{id}			</if>		</where>	</select>			<select id="searchUserByInfo" resultMap="basic_result_map">		select distinct users.*,a.rmb as rmb_balance, a.usd as usd_balance		from users left join `account` as a on users.id=a.user_id		<where>			<if test="info!=null and info!=''">				(email like #{info} or real_name like #{info} or nick_name like #{info} or phone like #{info} or qq like #{info} or usercode like #{info} or useralias like #{info})			</if>			<if test="id!=null and id!=''">							or id= #{id}			</if>		</where>		order by users.sign_date desc,users.id		limit		#{index},#{size}	</select>			<select id="countByKeyAdmin" resultType="java.lang.Integer">		select count(*) from users left join `account` as a on users.id=a.user_id		<where>			<if test="key!=null and key!=''">				(email like #{key} or real_name like #{key} or nick_name like #{key} or phone like #{key} or qq like #{key} or usercode like #{key} or useralias like #{key})			</if>			<if test="userId!=null and userId!=''">				and id = #{userId} 			</if>			<if test="type!=null and type!=''">				and type = #{type} 			</if>		</where>	</select>			<select id="searchByKeyAdmin" resultMap="basic_result_map">		select distinct users.*,a.rmb as rmb_balance, a.usd as usd_balance		from users left join `account` as a on users.id=a.user_id		<where>			<if test="key!=null and key!=''">				(email like #{key} or real_name like #{key} or nick_name like #{key} or phone like #{key} or qq like #{key} or usercode like #{key} or useralias like #{key})			</if>			<if test="userId!=null and userId!=''">				and id = #{userId} 			</if>			<if test="type!=null and type!=''">				and type = #{type} 			</if>		</where>		order by users.sign_date desc,users.id		limit		#{index},#{size}	</select>				<select id="countByInfoforzy" resultType="java.lang.Integer">		select count(*) from users left join `account` as a on users.id=a.user_id		<where>			<if test="info!=null and info!=''">				(usercode like #{info} or useralias like #{info})			</if>			<if test="id!=null and id!=''">							or id= #{id}			</if>		</where>	</select>			<select id="searchUserByInfoforzy" resultMap="basic_result_map">		select distinct users.*,a.rmb as rmb_balance, a.usd as usd_balance		from users left join `account` as a on users.id=a.user_id		<where>			<if test="info!=null and info!=''">				(usercode like #{info} or useralias like #{info})			</if>			<if test="id!=null and id!=''">							or id= #{id}			</if>		</where>		order by users.sign_date desc,users.id		limit		#{index},#{size}	</select>	</mapper>